<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>信笺叶子</title>
  <subtitle>哈哈哈Camera</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zonectmac.com/"/>
  <updated>2020-03-21T04:34:14.573Z</updated>
  <id>http://zonectmac.com/</id>
  
  <author>
    <name>ZonecTmac</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>selenium 截长图</title>
    <link href="http://zonectmac.com/2019/04/21/selenium-%E6%88%AA%E9%95%BF%E5%9B%BE/"/>
    <id>http://zonectmac.com/2019/04/21/selenium-截长图/</id>
    <published>2019-04-21T07:18:58.000Z</published>
    <updated>2020-03-21T04:34:14.573Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="python" scheme="http://zonectmac.com/tags/python/"/>
    
      <category term="java" scheme="http://zonectmac.com/tags/java/"/>
    
      <category term="selenium" scheme="http://zonectmac.com/tags/selenium/"/>
    
  </entry>
  
  <entry>
    <title>tensorflow手写识别</title>
    <link href="http://zonectmac.com/2018/08/29/tensorflow%E6%89%8B%E5%86%99%E8%AF%86%E5%88%AB/"/>
    <id>http://zonectmac.com/2018/08/29/tensorflow手写识别/</id>
    <published>2018-08-29T14:10:24.000Z</published>
    <updated>2018-08-29T15:29:02.220Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用Tensorflow和MNIST识别自己手写的数字"><a href="#使用Tensorflow和MNIST识别自己手写的数字" class="headerlink" title="使用Tensorflow和MNIST识别自己手写的数字"></a>使用Tensorflow和MNIST识别自己手写的数字</h2><p>这里主要是利用CNN算法来训练Google提供的MNIST_data数据，然后保存模型，然后利用模型来测试识别图片数字</p>
<h2 id="Tensorflow和MNIST简介"><a href="#Tensorflow和MNIST简介" class="headerlink" title="Tensorflow和MNIST简介"></a>Tensorflow和MNIST简介</h2><p>TensorFlow™ 是一个采用数据流图，用于数值计算的开源软件库。它是一个不严格的“神经网络”库，可以利用它提供的模块搭建大多数类型的神经网络。它可以基于ＣＰＵ或ＧＰＵ运行，可以自动使用ＧＰＵ，无需编写分配程序。</p>
<p>MNIST是一个巨大的手写数字数据集，被广泛应用于机器学习识别领域。MNIST有60000张训练集数据和10000张测试集数据，每一个训练元素都是28*28像素的手写数字图片。作为一个常见的数据集，MNIST经常被用来测试神经网络，也是比较基本的应用。</p>
<h2 id="CNN算法"><a href="#CNN算法" class="headerlink" title="CNN算法"></a>CNN算法</h2><p>识别算法主要使用的是卷积神经网络算法（CNN）。<br><img src="https://img-blog.csdn.net/20170327055429580?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvU3BhcnRhXzExNw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="avatar"></p>
<p>主要结构为：输入-卷积层-池化层-卷积层-池化层-全连接层-输出</p>
<h3 id="卷积"><a href="#卷积" class="headerlink" title="卷积"></a>卷积</h3><p>卷积其实可以看做是提取特征的过程。如果不使用卷积的话，整个网络的输入量就是整张图片，处理就很困难。 </p>
<p><img src="https://img-blog.csdn.net/20170327060008775?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvU3BhcnRhXzExNw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="avatar"></p>
<p>假设图中绿色5<em>5矩阵为原图片，黄色的3</em>3矩阵就是我们的过滤器，即卷积核。将黄色矩阵和绿色矩阵被覆盖的部分进行卷积计算，即每个元素相乘求和，便可得到这一部分的特征值，即图中的卷积特征。<br>然后，向右滑动黄色的矩阵，便可继续求下一部分的卷积特征值。而滑动的距离就是步长。</p>
<h3 id="池化"><a href="#池化" class="headerlink" title="池化"></a>池化</h3><p>池化是用来把卷积结果进行压缩，进一步减少全连接时的连接数。 </p>
<p><img src="https://img-blog.csdn.net/20170327060326343?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvU3BhcnRhXzExNw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="avatar"></p>
<p>池化有两种：<br>一种是最大池化，在选中区域中找最大的值作为抽样后的值；<br>一种是平均值池化，把选中的区域中的平均值作为抽样后的值。</p>
<h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><h3 id="1-训练程序-保存模型"><a href="#1-训练程序-保存模型" class="headerlink" title="1.训练程序,保存模型"></a>1.训练程序,保存模型</h3><p>这里我就先把程序贴出来，主体和tensorflow教程上大致相同。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line">from tensorflow.examples.tutorials.mnist import input_data</div><div class="line">import tensorflow as tf</div><div class="line"></div><div class="line"># 训练模型</div><div class="line">mnist = input_data.read_data_sets(&apos;MNIST_data&apos;, one_hot=True)</div><div class="line"></div><div class="line">sess = tf.InteractiveSession()</div><div class="line"></div><div class="line">x = tf.placeholder(tf.float32, shape=[None, 784])</div><div class="line">y_ = tf.placeholder(tf.float32, shape=[None, 10])</div><div class="line">W = tf.Variable(tf.zeros([784, 10]))</div><div class="line">b = tf.Variable(tf.zeros([10]))</div><div class="line"></div><div class="line">sess.run(tf.global_variables_initializer())</div><div class="line"></div><div class="line">y = tf.matmul(x, W) + b</div><div class="line"></div><div class="line">cross_entropy = tf.reduce_mean(</div><div class="line">    tf.nn.softmax_cross_entropy_with_logits(labels=y_, logits=y))</div><div class="line"></div><div class="line">train_step = tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy)</div><div class="line"></div><div class="line">for _ in range(1000):</div><div class="line">    batch = mnist.train.next_batch(100)</div><div class="line">    train_step.run(feed_dict=&#123;x: batch[0], y_: batch[1]&#125;)</div><div class="line">correct_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(y_, 1))</div><div class="line"></div><div class="line">accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))</div><div class="line"></div><div class="line">print(accuracy.eval(feed_dict=&#123;x: mnist.test.images, y_: mnist.test.labels&#125;))</div><div class="line"></div><div class="line"></div><div class="line">def weight_variable(shape):</div><div class="line">    initial = tf.truncated_normal(shape, stddev=0.1)</div><div class="line">    return tf.Variable(initial)</div><div class="line"></div><div class="line"></div><div class="line">def bias_variable(shape):</div><div class="line">    initial = tf.constant(0.1, shape=shape)</div><div class="line">    return tf.Variable(initial)</div><div class="line"></div><div class="line"></div><div class="line">def conv2d(x, W):</div><div class="line">    return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding=&apos;SAME&apos;)</div><div class="line"></div><div class="line"></div><div class="line">def max_pool_2x2(x):</div><div class="line">    return tf.nn.max_pool(x, ksize=[1, 2, 2, 1],</div><div class="line">                          strides=[1, 2, 2, 1], padding=&apos;SAME&apos;)</div><div class="line"></div><div class="line"></div><div class="line">W_conv1 = weight_variable([5, 5, 1, 32])</div><div class="line">b_conv1 = bias_variable([32])</div><div class="line">x_image = tf.reshape(x, [-1, 28, 28, 1])</div><div class="line">h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)</div><div class="line">h_pool1 = max_pool_2x2(h_conv1)</div><div class="line"></div><div class="line">W_conv2 = weight_variable([5, 5, 32, 64])</div><div class="line">b_conv2 = bias_variable([64])</div><div class="line">h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)</div><div class="line">h_pool2 = max_pool_2x2(h_conv2)</div><div class="line"></div><div class="line">W_fc1 = weight_variable([7 * 7 * 64, 1024])</div><div class="line">b_fc1 = bias_variable([1024])</div><div class="line"></div><div class="line">h_pool2_flat = tf.reshape(h_pool2, [-1, 7 * 7 * 64])</div><div class="line">h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)</div><div class="line">keep_prob = tf.placeholder(tf.float32)</div><div class="line">h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)</div><div class="line">W_fc2 = weight_variable([1024, 10])</div><div class="line">b_fc2 = bias_variable([10])</div><div class="line"></div><div class="line">y_conv = tf.matmul(h_fc1_drop, W_fc2) + b_fc2</div><div class="line">cross_entropy = tf.reduce_mean(</div><div class="line">    tf.nn.softmax_cross_entropy_with_logits(labels=y_, logits=y_conv))</div><div class="line">train_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)</div><div class="line">correct_prediction = tf.equal(tf.argmax(y_conv, 1), tf.argmax(y_, 1))</div><div class="line">accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))</div><div class="line"></div><div class="line">saver = tf.train.Saver()  # defaults to saving all variables</div><div class="line"></div><div class="line">sess.run(tf.global_variables_initializer())</div><div class="line">for i in range(20000):</div><div class="line">    batch = mnist.train.next_batch(50)</div><div class="line">    if i % 100 == 0:</div><div class="line">        train_accuracy = accuracy.eval(feed_dict=&#123;</div><div class="line">            x: batch[0], y_: batch[1], keep_prob: 1.0&#125;)</div><div class="line">        print(&quot;step %d, training accuracy %g&quot; % (i, train_accuracy))</div><div class="line"></div><div class="line">    train_step.run(feed_dict=&#123;x: batch[0], y_: batch[1], keep_prob: 0.5&#125;)</div><div class="line">saver.save(sess, &quot;./model/ckpt.model&quot;)  # 保存模型参数，注意把这里改为自己的路径</div><div class="line"></div><div class="line">print(&quot;test accuracy %g&quot; % accuracy.eval(feed_dict=&#123;</div><div class="line">    x: mnist.test.images, y_: mnist.test.labels, keep_prob: 1.0&#125;))</div></pre></td></tr></table></figure>
<p>训练好了网络，下一步就要测试它了。这里我们用Google提供的训练数据，我们把二进制文件转换为图片</p>
<p>这里是代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">from PIL import Image</div><div class="line">import struct</div><div class="line"></div><div class="line"></div><div class="line"># 解析mnist图片</div><div class="line">def read_image(filename):</div><div class="line">    f = open(filename, &apos;rb&apos;)</div><div class="line"></div><div class="line">    index = 0</div><div class="line">    buf = f.read()</div><div class="line"></div><div class="line">    f.close()</div><div class="line"></div><div class="line">    magic, images, rows, columns = struct.unpack_from(&apos;&gt;IIII&apos;, buf, index)</div><div class="line">    index += struct.calcsize(&apos;&gt;IIII&apos;)</div><div class="line"></div><div class="line">    for i in range(images):</div><div class="line">        # for i in xrange(2000):</div><div class="line">        image = Image.new(&apos;L&apos;, (columns, rows))</div><div class="line"></div><div class="line">        for x in range(rows):</div><div class="line">            for y in range(columns):</div><div class="line">                image.putpixel((y, x), int(struct.unpack_from(&apos;&gt;B&apos;, buf, index)[0]))</div><div class="line">                index += struct.calcsize(&apos;&gt;B&apos;)</div><div class="line"></div><div class="line">        print(&apos;save &apos; + str(i) + &apos;image&apos;)</div><div class="line">        image.save(&apos;./image/test/&apos; + str(i) + &apos;.png&apos;)</div><div class="line"></div><div class="line"></div><div class="line">def read_label(filename, saveFilename):</div><div class="line">    f = open(filename, &apos;rb&apos;)</div><div class="line">    index = 0</div><div class="line">    buf = f.read()</div><div class="line"></div><div class="line">    f.close()</div><div class="line"></div><div class="line">    magic, labels = struct.unpack_from(&apos;&gt;II&apos;, buf, index)</div><div class="line">    index += struct.calcsize(&apos;&gt;II&apos;)</div><div class="line"></div><div class="line">    labelArr = [0] * labels</div><div class="line">    # labelArr = [0] * 2000</div><div class="line"></div><div class="line">    for x in range(labels):</div><div class="line">        # for x in xrange(2000):</div><div class="line">        labelArr[x] = int(struct.unpack_from(&apos;&gt;B&apos;, buf, index)[0])</div><div class="line">        index += struct.calcsize(&apos;&gt;B&apos;)</div><div class="line"></div><div class="line">    save = open(saveFilename, &apos;w&apos;)</div><div class="line"></div><div class="line">    save.write(&apos;,&apos;.join(map(lambda x: str(x), labelArr)))</div><div class="line">    save.write(&apos;\n&apos;)</div><div class="line"></div><div class="line">    save.close()</div><div class="line">    print(&apos;save labels success&apos;)</div><div class="line"></div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    read_image(&apos;MNIST_data/t10k-images.idx3-ubyte&apos;)</div><div class="line">    read_label(&apos;MNIST_data/t10k-labels.idx1-ubyte&apos;, &apos;./image/test/label.txt&apos;)</div></pre></td></tr></table></figure></p>
<p>转换完后得到的图片:</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2953420-34dfbd268a4ed46e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="0.png"></p>
<p>这里我们也可以自己写一位数字图片，然后利用opencv把图片处理成28*28像素的，并转变为灰度图，进行二值化处理。<br>列如这样的照片:<br><img src="https://img-blog.csdn.net/20170623085901575?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvU3BhcnRhXzExNw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="3.png"></p>
<p>完成预处理程序后，我们得到了这样的图片：<br><img src="https://img-blog.csdn.net/20170623090803616?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvU3BhcnRhXzExNw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="33.png"></p>
<h2 id="将图片输入网络进行识别"><a href="#将图片输入网络进行识别" class="headerlink" title="将图片输入网络进行识别"></a>将图片输入网络进行识别</h2><p>这里我是编写了一个前向传播的程序，最后softmax层分类的结果就是最后的识别结果啦。 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div></pre></td><td class="code"><pre><div class="line">from PIL import Image, ImageFilter</div><div class="line">import tensorflow as tf</div><div class="line">import matplotlib.pyplot as plt</div><div class="line">import cv2.cv2 as cv2</div><div class="line"></div><div class="line"></div><div class="line"># 模型测试 识别图片 图片一定是28*28的</div><div class="line"></div><div class="line">def imageprepare():</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    This function returns the pixel values.</div><div class="line">    The imput is a png file location.</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    file_name = &apos;image/test/5.png&apos;  # 导入自己的图片地址</div><div class="line">    # in terminal &apos;mogrify -format png *.jpg&apos; convert jpg to png</div><div class="line">    im = Image.open(file_name).convert(&apos;L&apos;)</div><div class="line"></div><div class="line">    im.save(&quot;image/sample.png&quot;)</div><div class="line">    plt.imshow(im)</div><div class="line">    plt.show()</div><div class="line">    tv = list(im.getdata())  # get pixel values</div><div class="line">    print(tv)</div><div class="line">    # normalize pixels to 0 and 1. 0 is pure white, 1 is pure black.</div><div class="line">    # 这里如果图片数字是黑的 背景是白的 tva = [(250-x) * 1.0 / 255.0 for x in tv]</div><div class="line">    tva = [(x) * 1.0 / 255.0 for x in tv]</div><div class="line">    print(tva)</div><div class="line">    return tva</div><div class="line"></div><div class="line">    &quot;&quot;&quot;</div><div class="line">    This function returns the predicted integer.</div><div class="line">    The imput is the pixel values from the imageprepare() function.</div><div class="line">    &quot;&quot;&quot;</div><div class="line"></div><div class="line">    # Define the model (same as when creating the model file)</div><div class="line"></div><div class="line"></div><div class="line">result = imageprepare()</div><div class="line">x = tf.placeholder(tf.float32, [None, 784])</div><div class="line">W = tf.Variable(tf.zeros([784, 10]))</div><div class="line">b = tf.Variable(tf.zeros([10]))</div><div class="line"></div><div class="line"></div><div class="line">def weight_variable(shape):</div><div class="line">    initial = tf.truncated_normal(shape, stddev=0.1)</div><div class="line">    return tf.Variable(initial)</div><div class="line"></div><div class="line"></div><div class="line">def bias_variable(shape):</div><div class="line">    initial = tf.constant(0.1, shape=shape)</div><div class="line">    return tf.Variable(initial)</div><div class="line"></div><div class="line"></div><div class="line">def conv2d(x, W):</div><div class="line">    return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding=&apos;SAME&apos;)</div><div class="line"></div><div class="line"></div><div class="line">def max_pool_2x2(x):</div><div class="line">    return tf.nn.max_pool(x, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding=&apos;SAME&apos;)</div><div class="line"></div><div class="line"></div><div class="line">W_conv1 = weight_variable([5, 5, 1, 32])</div><div class="line">b_conv1 = bias_variable([32])</div><div class="line"></div><div class="line">x_image = tf.reshape(x, [-1, 28, 28, 1])</div><div class="line">h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)</div><div class="line">h_pool1 = max_pool_2x2(h_conv1)</div><div class="line"></div><div class="line">W_conv2 = weight_variable([5, 5, 32, 64])</div><div class="line">b_conv2 = bias_variable([64])</div><div class="line"></div><div class="line">h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)</div><div class="line">h_pool2 = max_pool_2x2(h_conv2)</div><div class="line"></div><div class="line">W_fc1 = weight_variable([7 * 7 * 64, 1024])</div><div class="line">b_fc1 = bias_variable([1024])</div><div class="line"></div><div class="line">h_pool2_flat = tf.reshape(h_pool2, [-1, 7 * 7 * 64])</div><div class="line">h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)</div><div class="line"></div><div class="line">keep_prob = tf.placeholder(tf.float32)</div><div class="line">h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)</div><div class="line"></div><div class="line">W_fc2 = weight_variable([1024, 10])</div><div class="line">b_fc2 = bias_variable([10])</div><div class="line"></div><div class="line">y_conv = tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2) + b_fc2)</div><div class="line"></div><div class="line">init_op = tf.initialize_all_variables()</div><div class="line"></div><div class="line">&quot;&quot;&quot;</div><div class="line">Load the model2.ckpt file</div><div class="line">file is stored in the same directory as this python script is started</div><div class="line">Use the model to predict the integer. Integer is returend as list.</div><div class="line"></div><div class="line">Based on the documentatoin at</div><div class="line">https://www.tensorflow.org/versions/master/how_tos/variables/index.html</div><div class="line">&quot;&quot;&quot;</div><div class="line">saver = tf.train.Saver()</div><div class="line">with tf.Session() as sess:</div><div class="line">    sess.run(init_op)</div><div class="line">    saver.restore(sess, &quot;./model/ckpt.model&quot;)  # 这里使用了之前保存的模型参数</div><div class="line">    # print (&quot;Model restored.&quot;)</div><div class="line"></div><div class="line">    prediction = tf.argmax(y_conv, 1)</div><div class="line">    predint = prediction.eval(feed_dict=&#123;x: [result], keep_prob: 1.0&#125;, session=sess)</div><div class="line">    print(h_conv2)</div><div class="line"></div><div class="line">    print(&apos;recognize result:&apos;)</div><div class="line">    print(predint[0])</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;使用Tensorflow和MNIST识别自己手写的数字&quot;&gt;&lt;a href=&quot;#使用Tensorflow和MNIST识别自己手写的数字&quot; class=&quot;headerlink&quot; title=&quot;使用Tensorflow和MNIST识别自己手写的数字&quot;&gt;&lt;/a&gt;使用Ten
    
    </summary>
    
    
      <category term="python" scheme="http://zonectmac.com/tags/python/"/>
    
      <category term="tensorflow" scheme="http://zonectmac.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>scrapy 爬取亚马逊信息</title>
    <link href="http://zonectmac.com/2018/04/16/scrapy-%E7%88%AC%E5%8F%96%E4%BA%9A%E9%A9%AC%E9%80%8A%E4%BF%A1%E6%81%AF/"/>
    <id>http://zonectmac.com/2018/04/16/scrapy-爬取亚马逊信息/</id>
    <published>2018-04-16T14:15:59.000Z</published>
    <updated>2018-04-16T14:55:36.919Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、安装scrapy"><a href="#一、安装scrapy" class="headerlink" title="一、安装scrapy"></a>一、安装scrapy</h3><p>这里不多说，查找网上教程自行安装就行</p>
<h3 id="二、爬取目的"><a href="#二、爬取目的" class="headerlink" title="二、爬取目的"></a>二、爬取目的</h3><p> 因为最近有个需求是检测Amazon网站的两个店铺所卖的东西，所以这里主要是拿取店铺里面产品的ASIN单号</p>
<h3 id="三、开始爬虫"><a href="#三、开始爬虫" class="headerlink" title="三、开始爬虫"></a>三、开始爬虫</h3><h4 id="1、输入命令创建项目，（这里有一些命令，大家可以输入scrapy查看命令-，这里不多说）"><a href="#1、输入命令创建项目，（这里有一些命令，大家可以输入scrapy查看命令-，这里不多说）" class="headerlink" title="1、输入命令创建项目，（这里有一些命令，大家可以输入scrapy查看命令 ，这里不多说）"></a>1、输入命令创建项目，（这里有一些命令，大家可以输入scrapy查看命令 ，这里不多说）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scrapy startproject Amazon</div></pre></td></tr></table></figure>
<h4 id="2、默认文件功能"><a href="#2、默认文件功能" class="headerlink" title="2、默认文件功能"></a>2、默认文件功能</h4><p>命令输入完成后，会相应生成一些文件，如下：<br><img src="https://upload-images.jianshu.io/upload_images/2953420-540173995e11a2dd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="28E3FDA6-2A2B-4398-97AE-DEB40AA69B63.png"></p>
<blockquote>
<ul>
<li>spider文件夹主要是放置你的爬虫文件的。</li>
<li>item.py主要是用来自定义类,然后声明一些你要爬取的字段信息。</li>
<li>middlewares.py中间件,Spider中间件是介入到Scrapy的spider处理机制的钩子框架，您可以添加代码来处理发送给 Spiders的response及spider产生的item和request。这里可以设置代理ip等。</li>
<li>pipelines.py 这里主要是处理item信息的。 当Item在Spider中被收集之后，它将会被传递到Item Pipeline，一些组件会按照一定的顺序执行对Item的处理。</li>
<li>setting.py Scrapy设定(settings)提供了定制Scrapy组件的方法。您可以控制包括核心(core)，插件(extension)，pipeline及spider组件。设定为代码提供了提取以key-value映射的配置值的的全局命名空间(namespace)。 设定可以通过下面介绍的多种机制进行设置。设定(settings)同时也是选择当前激活的Scrapy项目的方法(如果您有多个的话)。内置设定列表请参考 <a href="https://scrapy-chs.readthedocs.io/zh_CN/1.0/topics/settings.html#topics-settings-ref" target="_blank" rel="external">内置设定参考手册</a> 。</li>
</ul>
</blockquote>
<p>以下是item pipeline的一些典型应用：</p>
<blockquote>
<pre><code>• 清理HTML数据
• 验证爬取的数据(检查item包含某些字段)
• 查重(并丢弃)
• 将爬取结果保存到数据库中
</code></pre></blockquote>
<h4 id="3、编写代码"><a href="#3、编写代码" class="headerlink" title="3、编写代码"></a>3、编写代码</h4><p>首先在spider文件夹里面创建爬虫文件,我们这里有两个店铺需要爬取,我先写uk这个店铺的,创建uk_amazon_spider.py<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">class UkAmazonSpider(scrapy.Spider):</div><div class="line">    name = &apos;ukamazonspider&apos;</div><div class="line">    # allowed_domains = [&quot;amazon&quot;]</div><div class="line">    start_urls = [</div><div class="line">        &apos;https://www.amazon.co.uk/s?marketplaceID=A1F83G8C2ARO7P&amp;me=ANZYLS5IXG3VI&amp;merchant=ANZYLS5IXG3VI&amp;redirect=true&apos;]</div><div class="line"></div><div class="line">    def parse(self, response):</div><div class="line">        anis_list = response.xpath(&quot;//li/div[@class=&apos;s-item-container&apos;]&quot;)</div><div class="line">        for anis in anis_list:</div><div class="line">            item = UkPipelineItem()</div><div class="line">            anis_link = anis.xpath(&quot;./div[3]/div[1]/a/@href&quot;).extract()[0]</div><div class="line">            item[&quot;uk_anis&quot;] = anis_link.split(&apos;/dp/&apos;)[1].split(&apos;/&apos;)[0]</div><div class="line">            if len(anis.xpath(&quot;.//div[@class=&apos;a-box-inner a-padding-mini&apos;]&quot;)) &gt; 0:</div><div class="line">                print(&apos;more&apos;)</div><div class="line">                yield scrapy.Request(anis_link, callback=self.parse_more)</div><div class="line"></div><div class="line">            yield item</div><div class="line">        if len(response.xpath(&quot;//a[@id=&apos;pagnNextLink&apos;]&quot;)) &gt; 0:</div><div class="line">            next_url = response.xpath(&quot;//a[@id=&apos;pagnNextLink&apos;]/@href&quot;).extract()[0]</div><div class="line">            print(next_url)</div><div class="line">            yield scrapy.Request(&quot;https://www.amazon.co.uk&quot; + next_url, callback=self.parse)</div></pre></td></tr></table></figure></p>
<blockquote>
<ul>
<li>name: 用于区别Spider。 该名字必须是唯一的，您不可以为不同的Spider设定相同的名字。</li>
<li>start_urls: 包含了Spider在启动时进行爬取的url列表。 因此，第一个被获取到的页面将是其中之一。 后续的URL则从初始的URL获取到的数据中提取。</li>
<li>parse() 是spider的一个方法。 被调用时，每个初始URL完成下载后生成的 Response 对象将会作为唯一的参数传递给该函数。 该方法负责解析返回的数据(response data)，提取数据(生成item)以及生成需要进一步处理的URL的 Request 对象。</li>
<li>allowed_domains 这里是爬取网站的域名,可选项</li>
</ul>
</blockquote>
<p>打开我们的起始页,我们发现我们要的asin单号其实在我们产品链接里面的,那么我们首先要拿到这里的链接才行,其实我们也可以点开这个连接进入到另一个页面获取,但是这里直接在连接里面提取更快。我们通过小path提取当前页面的所有产品详情url，然后循环提取其中的anis_link,拿到里面的anis后传给item。这里我们发现有的产品可能有多个颜色的选择，它的每个颜色的anis单号不一样，所以我们要获取这个产品的url，进入到这个产品的页面去获取其他颜色的anis单号。需要多写个方法yield scrapy.Request(anis_link, callback=self.parse_more)，<strong>记住这里要用yield，不要return</strong>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@classmethod</div><div class="line">    def parse_more(self, response):</div><div class="line">        # 拿更多的</div><div class="line">        data_asin = response.xpath(&quot;//div[@id=&apos;variation_color_name&apos;]/ul/li&quot;)</div><div class="line">        if data_asin is None:</div><div class="line">            return</div><div class="line">        for data in data_asin:</div><div class="line">            item = UkPipelineItem()</div><div class="line">            dataa = data.xpath(&quot;./@data-defaultasin&quot;).extract()[0]</div><div class="line">            item[&quot;uk_anis&quot;] = dataa + &quot;-more&quot;</div><div class="line">            yield item</div></pre></td></tr></table></figure></p>
<p>通过xpath定位元素，然后传给item就行，至于如何使用xpath，这里不多做阐述。</p>
<p>好吧，我们拿到了第一个页面的所有anis单号，但是这里我们有十几个页面需要去拿，涉及到翻页。我们发现其实下一页的链接都存在下一页的按钮中，我们只需要爬取每一夜的时候拿到这个链接并把它加入到我们的请求中去就行了。但是回调函数还是当前的这个方法，因为每个页面的解析都一样。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if len(response.xpath(&quot;//a[@id=&apos;pagnNextLink&apos;]&quot;)) &gt; 0:</div><div class="line">            next_url = response.xpath(&quot;//a[@id=&apos;pagnNextLink&apos;]/@href&quot;).extract()[0]</div><div class="line">            print(next_url)</div><div class="line">            yield scrapy.Request(&quot;https://www.amazon.co.uk&quot; + next_url, callback=self.parse)</div></pre></td></tr></table></figure></p>
<p>这里爬虫文件代码写完了，是不是很简单。</p>
<h4 id="4、我们看下我们的item-py文件"><a href="#4、我们看下我们的item-py文件" class="headerlink" title="4、我们看下我们的item.py文件"></a>4、我们看下我们的item.py文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">class UkPipelineItem(scrapy.Item):</div><div class="line">    # define the fields for your item here like:</div><div class="line">    uk_anis = scrapy.Field()</div></pre></td></tr></table></figure>
<p>很简单，因为我们只需要拿到anis单号就行</p>
<h4 id="5、看下pipelines-py文件"><a href="#5、看下pipelines-py文件" class="headerlink" title="5、看下pipelines.py文件"></a>5、看下pipelines.py文件</h4><p>这里是处理item的，所以我们要把拿到的item写入到文件里，这里我们选择txt，如果你要拿的字段比较多的话，选择json比较好。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">class AmazonscrapyPipeline(object):</div><div class="line">    def __init__(self):</div><div class="line">        self.uk_file = open(&quot;txt/uk_amaozninfo.txt&quot;, &quot;w&quot;)</div><div class="line"></div><div class="line">    def process_item(self, item, spider):</div><div class="line">        self.uk_file.write(item[&quot;uk_anis&quot;] + &quot;\n&quot;)</div><div class="line"></div><div class="line">        return item</div><div class="line"></div><div class="line">    def close_spider(self, spider):</div><div class="line">        self.uk_file.close()</div></pre></td></tr></table></figure>
<p>这样其实我们的代码已经写完了，但是我们要在setting里面注册启用item pipeline才行</p>
<h4 id="6、setting-py文件"><a href="#6、setting-py文件" class="headerlink" title="6、setting.py文件"></a>6、setting.py文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ITEM_PIPELINES = &#123;</div><div class="line">    &apos;AmazonScrapy.pipelines.AmazonscrapyPipeline&apos;: 300,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="四、代理"><a href="#四、代理" class="headerlink" title="四、代理"></a>四、代理</h3><p>我们通过上面的代码已经可以拿到我们的信息了,但是这不是长久的,很可能被封ip,我们就需要代理了。首先我们需要在middlewares.py中间件里面自定义我们的中间件类，看代码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">class ProxyMiddleware(object):</div><div class="line">    &quot;&quot;&quot;Custom ProxyMiddleware.&quot;&quot;&quot;</div><div class="line"></div><div class="line">    def __init__(self, ):</div><div class="line">        self.ua_list = [</div><div class="line">            &quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; AcooBrowser; .NET CLR 1.1.4322; .NET CLR 2.0.50727)&quot;,</div><div class="line">            &quot;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Acoo Browser; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)&quot;,</div><div class="line">            &quot;Mozilla/4.0 (compatible; MSIE 7.0; AOL 9.5; AOLBuild 4337.35; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)&quot;,</div><div class="line">            &quot;Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US)&quot;,</div><div class="line">            &quot;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 2.0.50727; Media Center PC 6.0)&quot;,</div><div class="line">            &quot;Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 1.0.3705; .NET CLR 1.1.4322)&quot;,</div><div class="line">            &quot;Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.2; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2; .NET CLR 3.0.04506.30)&quot;,</div><div class="line">            &quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN) AppleWebKit/523.15 (KHTML, like Gecko, Safari/419.3) Arora/0.3 (Change: 287 c9dfb30)&quot;,</div><div class="line">            &quot;Mozilla/5.0 (X11; U; Linux; en-US) AppleWebKit/527+ (KHTML, like Gecko, Safari/419.3) Arora/0.6&quot;,</div><div class="line">            &quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.2pre) Gecko/20070215 K-Ninja/2.1.1&quot;,</div><div class="line">            &quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9) Gecko/20080705 Firefox/3.0 Kapiko/3.0&quot;, ]</div><div class="line"></div><div class="line">    def get_ip(self, spider):</div><div class="line">        urlip = &apos;http://dynamic.goubanjia.yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyb940cd4f310407e1189c.html&apos;</div><div class="line">        s = requests.Session()</div><div class="line">        # 设置重试次数</div><div class="line">        s.mount(&apos;http://&apos;, HTTPAdapter(max_retries=5))</div><div class="line">        s.mount(&apos;https://&apos;, HTTPAdapter(max_retries=5))</div><div class="line">        response = s.get(urlip, timeout=30)</div><div class="line">        ip = response.content.strip()</div><div class="line">        ip = str(ip, encoding=&apos;utf-8&apos;)</div><div class="line">        return ip</div><div class="line"></div><div class="line">    def process_request(self, request, spider):</div><div class="line">        ua = random.choice(self.ua_list)</div><div class="line">        request.headers.setdefault(&apos;User-Agent&apos;, ua)</div><div class="line">        print(self.get_ip(spider))</div><div class="line">        request.meta[&quot;proxy&quot;] = &quot;http://&quot; + self.get_ip(spider)</div></pre></td></tr></table></figure>
<p>我么设置了一些user header list，随机请求头，主要设置代理ip是在process_request这个方法里面，get_ip方法是获取代理ip的方法。同理我们要在setting里面启用这个中间件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">DOWNLOADER_MIDDLEWARES = &#123;</div><div class="line">     &apos;scrapy.downloadermiddlewares.httpproxy.HttpProxyMiddleware&apos;: 100,</div><div class="line">     &apos;AmazonScrapy.middlewares.ProxyMiddleware&apos;: 80,</div><div class="line">    &apos;AmazonScrapy.middlewares.RedirectionMiddleware&apos;: 120,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>后面的数字代表的优先级，数字越小代表优先级越高</p>
<p>我们代理设置完成了，但是为了防止被封我们还有一些东西要设置，同样在setting.py里面我们需要把robot协议设置为false,不遵守robot协议</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># Obey robots.txt rules</div><div class="line">ROBOTSTXT_OBEY = False</div><div class="line"></div><div class="line"># 如果启用，Scrapy将记录所有在request(Cookie 请求头)发送的cookies及response接收到的cookies(Set-Cookie 接收头)。</div><div class="line">COOKIES_ENABLED = False</div></pre></td></tr></table></figure>
<p>最后,我们写完了代码,通过命令启用爬虫就行了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scrapy crawl ukamazonspider</div></pre></td></tr></table></figure>
<p>看我的<a href="https://github.com/zonectmac/amazonspider" target="_blank" rel="external">github</a>代码，我写了两个爬虫文件，然后涉及到同时启用多个爬虫文件的方法，大家可以参考。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、安装scrapy&quot;&gt;&lt;a href=&quot;#一、安装scrapy&quot; class=&quot;headerlink&quot; title=&quot;一、安装scrapy&quot;&gt;&lt;/a&gt;一、安装scrapy&lt;/h3&gt;&lt;p&gt;这里不多说，查找网上教程自行安装就行&lt;/p&gt;
&lt;h3 id=&quot;二、爬取目的&quot;
    
    </summary>
    
    
      <category term="python" scheme="http://zonectmac.com/tags/python/"/>
    
      <category term="scrapy" scheme="http://zonectmac.com/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>android 打开相机实现连续拍照</title>
    <link href="http://zonectmac.com/2018/01/27/android-%E6%89%93%E5%BC%80%E7%9B%B8%E6%9C%BA%E5%AE%9E%E7%8E%B0%E8%BF%9E%E7%BB%AD%E6%8B%8D%E7%85%A7/"/>
    <id>http://zonectmac.com/2018/01/27/android-打开相机实现连续拍照/</id>
    <published>2018-01-27T05:22:47.000Z</published>
    <updated>2018-01-27T06:06:01.667Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h3><p>最近遇到一个需求，需要打开相机，然后连续拍几张照片把照片显示在界面上，上传至服务器。<br>为什么要连续拍照，是因为领导觉得连续拍照比一张张的拍照要快，好吧。。。。想办法实现吧。</p>
<h3 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h3><p>首先说的是，这里不采用自己写相机（太麻烦），直接打开系统相机，然后去获取照片。<br>一开始想的很简单，不就是打开相机然后在onActivityResult()方法里面拿到照片的路径不就完了吗<br>好，我们这里就来实现下：</p>
<h4 id="1、新建布局文件"><a href="#1、新建布局文件" class="headerlink" title="1、新建布局文件"></a>1、新建布局文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;? xml version= &quot;1.0&quot; encoding = &quot;utf-8&quot;?&gt;</div><div class="line">&lt; RelativeLayout xmlns:android =&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width= &quot;match_parent&quot;</div><div class="line">    android:layout_height= &quot;match_parent&quot;</div><div class="line">    android:orientation= &quot;vertical&quot; &gt;</div><div class="line"></div><div class="line">    &lt;Button</div><div class="line">        android:id =&quot;@+id/button1&quot;</div><div class="line">        android:layout_width =&quot;match_parent&quot;</div><div class="line">        android:layout_height =&quot;wrap_content&quot;</div><div class="line">        android:layout_centerHorizontal =&quot;true&quot;</div><div class="line">        android:text = &quot;拍照&quot; /&gt;</div><div class="line"></div><div class="line">    &lt;GridView</div><div class="line">        android:id =&quot;@+id/ryMain&quot;</div><div class="line">        android:layout_width =&quot;match_parent&quot;</div><div class="line">        android:layout_height =&quot;match_parent&quot;</div><div class="line">        android:layout_below =&quot;@+id/button1&quot;</div><div class="line">        android:numColumns =&quot;3&quot; &gt;</div><div class="line">    &lt;/GridView &gt;</div><div class="line"></div><div class="line">&lt;/ RelativeLayout&gt;</div></pre></td></tr></table></figure>
<h4 id="2、-初始化View"><a href="#2、-初始化View" class="headerlink" title="2、 初始化View:"></a>2、 初始化View:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">private Button bt ;</div><div class="line">      private GridView gridView;</div><div class="line"></div><div class="line">      @Override</div><div class="line">      protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">           super .onCreate(savedInstanceState);</div><div class="line">           setContentView(R.layout. activity_main );</div><div class="line">           bt = (Button) findViewById(R.id. button1 );</div><div class="line">           gridView = ((GridView) findViewById(R.id.ryMain ));</div><div class="line">          &#125;</div><div class="line"></div><div class="line">      public void takeOnCamera() &#123;</div><div class="line">           // 打开相机之前，记录时间1</div><div class="line">           systemTime1 = getSystemTime();</div><div class="line">           Intent intent = new Intent();</div><div class="line">           // 此处之所以诸多try catch，是因为各大厂商手机不确定哪个方法</div><div class="line">           try &#123;</div><div class="line">               intent.setAction(MediaStore. INTENT_ACTION_STILL_IMAGE_CAMERA );</div><div class="line">               startActivityForResult(intent, REQUEST_SMALL );</div><div class="line">          &#125; catch (Exception e) &#123;</div><div class="line">               try &#123;</div><div class="line">                   intent.setAction(MediaStore. ACTION_IMAGE_CAPTURE_SECURE );</div><div class="line">                   startActivityForResult(intent, REQUEST_SMALL );</div><div class="line"></div><div class="line">              &#125; catch (Exception e1) &#123;</div><div class="line">                    try &#123;</div><div class="line">                        intent.se tAction(MediaStore. INTENT_ACTION_STILL_IMAGE_CAMERA_SECURE );</div><div class="line">                        startActivityForResult(intent, REQUEST_SMALL );</div><div class="line">                   &#125; catch (Exception ell) &#123;</div><div class="line">                        Toast .makeText (MainActivity.this , &quot;请从相册选择&quot; ,</div><div class="line">                                  Toast. LENGTH_SHORT ).show();</div><div class="line">                   &#125;</div><div class="line">              &#125;</div><div class="line">          &#125;</div><div class="line"></div><div class="line">     &#125;</div></pre></td></tr></table></figure>
<h4 id="3、添加事件打开相机"><a href="#3、添加事件打开相机" class="headerlink" title="3、添加事件打开相机"></a>3、添加事件打开相机</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">bt .setOnClickListener( new View.OnClickListener() &#123;</div><div class="line">               @Override</div><div class="line">               public void onClick(View v) &#123;</div><div class="line">                    // 打开相机拍照</div><div class="line">                   takeOnCamera();</div><div class="line">              &#125;</div><div class="line"></div><div class="line">//打开相机</div><div class="line">ACTION_IMAGE_CAPTURE//打开相机拍照一次</div><div class="line">ACTION_IMAGE_CAPTURE_SECURE</div><div class="line">INTENT_ACTION_STILL_IMAGE_CAMERA</div><div class="line">INTENT_ACTION_STILL _IMAGE_CAMERA_SECURE</div></pre></td></tr></table></figure>
<p>这个intent是隐式跳转的，有四个常量，第一个大家都很熟悉，就是打开相机拍一张照片完事，所以我们不选他，其它的是拍多张的,我们一个个来试下。<br>先试下ACTION_IMAGE_CAPTURE_SECURE<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public void takeOnCamera() &#123;         </div><div class="line">          Intent intent = new Intent();        </div><div class="line">                   intent.setAction(MediaStore. ACTION_IMAGE_CAPTURE_SECURE );</div><div class="line">                   startActivityForResult(intent, REQUEST_SMALL );</div><div class="line">     &#125;</div></pre></td></tr></table></figure></p>
<p>在onActivityResult中我们得到返回值,打印log<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> @Override</div><div class="line"> protected void onActivityResult( int requestCode, int resultCode, Intent data) &#123;</div><div class="line">     Log. e( &quot;data&quot;, &quot;onActivityResult: &quot; + data);</div><div class="line">      super .onActivityResult(requestCode, resultCode, data);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最后运行试下,发现打印出来的data为null,其它模式也不行,这里试过了。好吧,这种好像不行,但是看到图片路径:<span style="color: LightSeaGreen !important;">———getContentProvider: /storage/emulated/0/DCIM/Camera/IMG_20180125_103542.jpg</span>,很熟悉,打开相册看下路径,明白了,要想拿到照片就得去相册里面拿。<br>但是怎么拿，这里就需要用到内容提供者 ContentProvider这个了</p>
<blockquote>
<p>好了，废话不多说，这里总结下：</p>
<ul>
<li>内容提供者ContentProvider与内容接受者ContentResolver</li>
</ul>
<ul>
<li>数据库、多线程（这个可以忽略但是要知道，数据库 ，上一条已经把这个做好了，多线程是因为查数据库其实是耗时的，最好在子线程里面，避免ANR，咱这里就不提了）</li>
<li>路径转换出时间再转换成数字（时间格式转化，String类型转换成其他类型），记录开始拍照的时间和结束拍照的时间</li>
<li>筛选图片路径(正则表达式)</li>
<li>根据路径path找到图片</li>
<li>把图片压缩放后放到集合里面（二次采样）</li>
</ul>
</blockquote>
<h3 id="三、拿取图片的代码"><a href="#三、拿取图片的代码" class="headerlink" title="三、拿取图片的代码"></a>三、拿取图片的代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">      protected void onActivityResult( int requestCode, int resultCode, Intent data) &#123;</div><div class="line">          Log. e( &quot;data&quot;, &quot;onActivityResult: &quot; + data);</div><div class="line">           // 关闭相机之后获得时间；2；</div><div class="line">           pb.setVisibility(View. VISIBLE );</div><div class="line">           systemTime2 = getSystemTime();</div><div class="line"></div><div class="line">           if (requestCode == REQUEST_SMALL ) &#123;</div><div class="line">               // 这里可以拓展不同按钮，给下面的方法传不同的参数</div><div class="line">               getContactList();</div><div class="line">          &#125;</div><div class="line"></div><div class="line">           super .onActivityResult(requestCode, resultCode, data);</div><div class="line">     &#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">private void getContactList() &#123;</div><div class="line">           // 读取照片然后选择合适的照片保存再list里面</div><div class="line">           final String[] projection = &#123; MediaStore.Images.Media._ID ,</div><div class="line">                   MediaStore.Images.Media. DISPLAY_NAME ,</div><div class="line">                   MediaStore.Images.Media. DATA &#125;;</div><div class="line">           final String orderBy = MediaStore.Images.Media.DISPLAY_NAME ;</div><div class="line">           final Uri uri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI ;</div><div class="line">           new Thread(new Runnable() &#123;</div><div class="line">               @Override</div><div class="line">               public void run() &#123;</div><div class="line">                   List&lt;MyBitmap&gt; list2 = getContentProvider(uri, projection,</div><div class="line">                             orderBy); // 到时候抽取接口</div><div class="line">                   Log. e( &quot;list&quot;,</div><div class="line">                              &quot;call: &quot; + list2.toString() + &quot;.size&quot; + list2.size());</div><div class="line">                    if (list2 != null) &#123;</div><div class="line">                         if (list2.size() &gt; 7) &#123;// 这里看要求最多几张照片</div><div class="line">                             list2 = list2.subList(list2.size() - 7, list2.size());</div><div class="line">                        &#125;</div><div class="line">                         final List&lt;MyBitmap&gt; finalList = list2;</div><div class="line">                         gridView.post( new Runnable() &#123;</div><div class="line">                              @Override</div><div class="line">                              public void run() &#123;</div><div class="line">                                   // TODO 拿到数据源然后拓展</div><div class="line">                                   gridView.setAdapter( new Myadapter(</div><div class="line">                                           MainActivity. this , finalList));// 拿到了就可以搞了</div><div class="line">                                   pb.setVisibility(View. GONE );</div><div class="line"></div><div class="line">                             &#125;</div><div class="line">                        &#125;);</div><div class="line"></div><div class="line">                   &#125;</div><div class="line"></div><div class="line">              &#125;</div><div class="line">          &#125;).start();</div><div class="line">     &#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">      * 获取ContentProvider</div><div class="line">      *</div><div class="line">      * @param projection</div><div class="line">      * @param orderBy</div><div class="line">      */</div><div class="line">      public List&lt;MyBitmap&gt; getContentProvider(Uri uri, String[] projection,</div><div class="line">              String orderBy) &#123;</div><div class="line">           // TODO Auto-generated method stub</div><div class="line"></div><div class="line">          List&lt;MyBitmap&gt; lists = new ArrayList&lt;MyBitmap&gt;();</div><div class="line">          HashSet&lt;String&gt; set = new HashSet&lt;String&gt;();</div><div class="line">          Cursor cursor = getContentResolver().query(uri, projection, null , null ,</div><div class="line">                   orderBy);</div><div class="line">           if (null == cursor) &#123;</div><div class="line">               return null ;</div><div class="line">          &#125;</div><div class="line"></div><div class="line">           while (cursor.moveToNext()) &#123;</div><div class="line">              Log. e( &quot;lengthpro&quot;, &quot;getContentProvider: &quot; + projection.length );</div><div class="line">               for (int i = 0; i &lt; projection. length; i++) &#123;</div><div class="line">                   String string = cursor.getString(i);</div><div class="line">                    if (string != null) &#123;</div><div class="line">                         int length = string.length();</div><div class="line">                        String ss = null ;</div><div class="line">                         if (length &gt;= 30) &#123;// 根据实际路径得到的。大一点保险</div><div class="line">                             ss = string.substring(length - 23, length);</div><div class="line">                             String substring = ss.substring(0, 4);// 大致判断一下是系统图片，后面严格塞选</div><div class="line">                             String hen = ss.substring(12, 13);</div><div class="line">                              if (substring.equals(&quot;IMG_&quot; ) &amp;&amp; hen.equals(&quot;_&quot; )) &#123;</div><div class="line">                                  String laststring = ss.substring(4, 19).replace(</div><div class="line">                                            &quot;_&quot; , &quot;&quot; );</div><div class="line">                                   try &#123;</div><div class="line">                                       long time = Long.valueOf(laststring)</div><div class="line">                                                .longValue();</div><div class="line">                                       if (time &gt; systemTime1 &amp;&amp; time &lt;= systemTime2 ) &#123;</div><div class="line">                                           set.add(string);</div><div class="line">                                      &#125;</div><div class="line">                                  &#125; catch (Exception e) &#123;</div><div class="line">                                      Log. e( &quot;exception&quot;,</div><div class="line">                                                 &quot;getContentProvider: &quot; + e.toString());</div><div class="line">                                  &#125;</div><div class="line">                             &#125;</div><div class="line">                        &#125;</div><div class="line">                   &#125;</div><div class="line">              &#125;</div><div class="line">          &#125;</div><div class="line"></div><div class="line">           for (String strings : set) &#123;</div><div class="line">              Log. e( &quot;setsize&quot;, &quot;getContentProvider: &quot; + strings);</div><div class="line">               try &#123;</div><div class="line">                   Bitmap bitmap = convertToBitmap(strings, 300, 300);</div><div class="line"></div><div class="line">                   MyBitmap myBitmap = new MyBitmap(strings, bitmap);</div><div class="line">                   lists.add(myBitmap);</div><div class="line">              &#125; catch (Exception e) &#123;</div><div class="line">                   Log. e( &quot;exceptionee&quot;, &quot;getSystemTime: &quot; + e.toString());</div><div class="line"></div><div class="line">              &#125;</div><div class="line"></div><div class="line">          &#125;</div><div class="line"></div><div class="line">           return lists;</div><div class="line">     &#125;</div></pre></td></tr></table></figure>
<p>下面就简单了，根据路径拿到图片并且二次采样如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">      * 根据路径，二次采样并且压缩</div><div class="line">      *</div><div class="line">      * @param filePath</div><div class="line">      *            路径</div><div class="line">      * @param destWidth</div><div class="line">      *            压缩到的宽度</div><div class="line">      * @param destHeight</div><div class="line">      *            压缩到的高度</div><div class="line">      * @return</div><div class="line">      */</div><div class="line">      public Bitmap convertToBitmap(String filePath, int destWidth, int destHeight) &#123;</div><div class="line">           // 第一采样</div><div class="line">          BitmapFactory.Options options = new BitmapFactory.Options();</div><div class="line">          options. inJustDecodeBounds = true ;</div><div class="line">          BitmapFactory. decodeFile(filePath, options);</div><div class="line">           int outWidth = options.outWidth ;</div><div class="line">           int outHeight = options.outHeight ;</div><div class="line">           int sampleSize = 1;</div><div class="line">           while ((outWidth / sampleSize &gt; destWidth)</div><div class="line">                   || (outHeight / sampleSize &gt; destHeight)) &#123;</div><div class="line"></div><div class="line">              sampleSize *= 2;</div><div class="line">          &#125;</div><div class="line">           // 第二次采样</div><div class="line">          options. inJustDecodeBounds = false ;</div><div class="line">          options. inSampleSize = sampleSize;</div><div class="line">          options. inPreferredConfig = Bitmap.Config.RGB_565 ;</div><div class="line">           return BitmapFactory.decodeFile(filePath, options);</div><div class="line">     &#125;</div></pre></td></tr></table></figure></p>
<p>这样数据源就有了可以设置到GridView的适配器里面啦<br>最后奉上全部代码地址：<a href="https://github.com/zonectmac/Camera_MoreImage" target="_blank" rel="external">Camera_MoreImage</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、概述&quot;&gt;&lt;a href=&quot;#一、概述&quot; class=&quot;headerlink&quot; title=&quot;一、概述&quot;&gt;&lt;/a&gt;一、概述&lt;/h3&gt;&lt;p&gt;最近遇到一个需求，需要打开相机，然后连续拍几张照片把照片显示在界面上，上传至服务器。&lt;br&gt;为什么要连续拍照，是因为领导觉得
    
    </summary>
    
    
      <category term="Android" scheme="http://zonectmac.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://zonectmac.com/2018/01/25/hello-world/"/>
    <id>http://zonectmac.com/2018/01/25/hello-world/</id>
    <published>2018-01-25T15:53:36.705Z</published>
    <updated>2018-01-25T15:56:08.472Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python识别验证码</title>
    <link href="http://zonectmac.com/2017/09/14/python%E8%AF%86%E5%88%AB%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    <id>http://zonectmac.com/2017/09/14/python识别验证码/</id>
    <published>2017-09-14T13:33:50.000Z</published>
    <updated>2018-01-25T15:56:08.696Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、探讨"><a href="#一、探讨" class="headerlink" title="一、探讨"></a>一、探讨</h3><p>识别图形验证码可以说是做爬虫的必修课，涉及到计算机图形学，机器学习，机器视觉，人工智能等等高深领域……<br>简单地说，计算机图形学的主要研究内容就是研究如何在计算机中表示图形、以及利用计算机进行图形的计算、处理和显示的相关原理与算法。<br>图形通常由点、线、面、体等几何元素和灰度、色彩、线型、线宽等非几何属性组成。计算机涉及到的几何图形处理一般有 2维到n维图形处理，边界区分，面积计算，体积计算，扭曲变形校正。对于颜色则有色彩空间的计算与转换，图形上色，阴影，色差处理等等。</p>
<blockquote>
<p>在破解验证码中需要用到的知识一般是 像素，线，面等基本2维图形元素的处理和色差分析。常见工具为：<br>    •支持向量机(SVM)<br>    •OpenCV<br>    •图像处理软件(Photoshop,Gimp…)<br>    •Python Image Library</p>
</blockquote>
<h3 id="二、工具"><a href="#二、工具" class="headerlink" title="二、工具"></a>二、工具</h3><h4 id="1-Python-pytesseract-库"><a href="#1-Python-pytesseract-库" class="headerlink" title="1.Python pytesseract 库"></a><strong>1.Python pytesseract 库</strong></h4><blockquote>
<p>pytesseract 是对 Tesseract-OCR 的一个封装，方便我们在 Python 中调用 Tesseract-OCR 引擎<br>  <a href="https://pypi.python.org/pypi/pytesseract/0.1" target="_blank" rel="external">pytesseract下载Pypi Page</a></p>
</blockquote>
<h4 id="2-Tesseract-OCR-开源识别引擎"><a href="#2-Tesseract-OCR-开源识别引擎" class="headerlink" title="2.Tesseract-OCR 开源识别引擎"></a><strong>2.Tesseract-OCR 开源识别引擎</strong></h4><blockquote>
<p>Tesseract was originally developed at Hewlett-Packard Laboratories Bristol and at Hewlett-Packard Co, Greeley Colorado between 1985 and 1994, with some more changes made in 1996 to port to Windows, and some C++izing in 1998.<br>  In 2005 Tesseract was open sourced by HP. Since 2006 it is developed by Google.<br>  <a href="https://github.com/tesseract-ocr/tesseract" target="_blank" rel="external">Github Page</a></p>
</blockquote>
<h4 id="3-Python-PIL-2-Pillow-3-库"><a href="#3-Python-PIL-2-Pillow-3-库" class="headerlink" title="3.Python PIL(2.)/Pillow(3.) 库"></a><strong>3.Python PIL(2.<em>)/Pillow(3.</em>) 库</strong></h4><blockquote>
<p>这两个库是 Python 关于图像处理的第三方库，其中 3.* 的版本要用 Pillow 库</p>
</blockquote>
<h3 id="三、安装"><a href="#三、安装" class="headerlink" title="三、安装"></a>三、安装</h3><h4 id="1-Tesseract-OCR"><a href="#1-Tesseract-OCR" class="headerlink" title="1.Tesseract-OCR"></a><strong>1.Tesseract-OCR</strong></h4><blockquote>
<ul>
<li>源码编译：可参照官方<a href="https://github.com/tesseract-ocr/tesseract/wiki/Compiling" target="_blank" rel="external">Wiki</a></li>
<li>windows：安装包可以在 <a href="https://sourceforge.net/projects/tesseract-ocr-alt/files/" target="_blank" rel="external">Sourceforge</a> 上下载，不过只有 3.02 版本的安装包,安装的时候有个语言选项,默认不安装,但是可以选择安装</li>
<li>Linux：以 Ubuntu 为例，在终端输入sudo apt-get tesseract-ocr即可进行安装</li>
<li>Mac：<ul>
<li>MacPorts sudo port install tesseract</li>
<li>Homebrew brew install tesseract</li>
</ul>
</li>
</ul>
</blockquote>
<p><strong>P.S.</strong><br>在windows上安装时，在 Target appended to the Path 这一步耗时较久，请耐心等候。</p>
<p>安装完成后，在命令行界面输入 tesseract 会出现以下提示：</p>
<blockquote>
<p>Usage:tesseract imagename outputbase [-l lang] [-psm pagesegmode] [configfile…] pagesegmode values are: 0 = Orientation and script detection (OSD) only. 1 = Automatic page segmentation with OSD. 2 = Automatic page segmentation, but no OSD, or OCR 3 = Fully automatic page segmentation, but no OSD. (Default) 4 = Assume a single column of text of variable sizes. 5 = Assume a single uniform block of vertically aligned text. 6 = Assume a single uniform block of text. 7 = Treat the image as a single text line. 8 = Treat the image as a single word. 9 = Treat the image as a single word in a circle. 10 = Treat the image as a single character. -l lang and/or -psm pagesegmode must occur before anyconfigfile. Single options: -v –version: version info –list-langs: list available languages for tesseract engine</p>
</blockquote>
<p>则说明引擎安装成功。</p>
<h4 id="2-virtualenv"><a href="#2-virtualenv" class="headerlink" title="2.virtualenv"></a><strong>2.virtualenv</strong></h4><p>为了将 Python 主环境隔离开来，不影响第三方库之间的兼容性，我们可以利用 virtualenv 来搭建虚拟且独立的python环境，可以使每个项目环境与其他项目独立开来，保持环境的干净，解决包冲突问题。</p>
<p>可以通过 pip 和 easy_install 进行安装：</p>
<blockquote>
<p>easy_install virtualenv<br>  或<br>  pip install virtualenv</p>
</blockquote>
<p>详细可参照使用<a href="http://qicheng0211.blog.51cto.com/3958621/1561685" target="_blank" rel="external">virtualenv搭建独立的Python环境</a></p>
<h4 id="3-PIL-Pillow-pytesseract"><a href="#3-PIL-Pillow-pytesseract" class="headerlink" title="3. PIL, Pillow, pytesseract"></a><strong>3. PIL, Pillow, pytesseract</strong></h4><p>这三个库都可以通过 pip 直接安装。</p>
<h3 id="四、编程"><a href="#四、编程" class="headerlink" title="四、编程"></a>四、编程</h3><blockquote>
<p>终于来到了这一步。。。。</p>
</blockquote>
<p>验证码识别的一般思路为：<br>    1、图片降噪<br>    2、图片切割<br>    3、图像文本输出</p>
<h4 id="1-图片降噪"><a href="#1-图片降噪" class="headerlink" title="1.图片降噪"></a><strong>1.图片降噪</strong></h4><p>所谓降噪就是把不需要的信息通通去除，比如背景，干扰线，干扰像素等等，只剩下需要识别的文字，让图片变成2进制点阵最好。</p>
<p>对于彩色背景的验证码：每个像素都可以放在一个5维的空间里，这5个维度分别是，X,Y,R,G,B，也就是像素的坐标和颜色，在计算机图形学中，有很多种色彩空间，最常用的比如RGB，印刷用的CYMK，还有比较少见的HSL或者HSV，每种色彩空间的维度都不一样，但是可以通过公式互相转换。在RGB空间中不好区分颜色，可以把色彩空间转换为HSV或HSL。色彩空间参见 <a href="http://baike.baidu.com/view/3427413.htm" target="_blank" rel="external">http://baike.baidu.com/view/3427413.htm</a> </p>
<p>验证码图片7039.jpg:<img src="http://upload-images.jianshu.io/upload_images/2953420-72f468df5dc788f9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Image.jpg"></p>
<h5 id="1-1、导入Image包，打开图片："><a href="#1-1、导入Image包，打开图片：" class="headerlink" title="1.1、导入Image包，打开图片："></a>1.1、导入Image包，打开图片：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">from PIL import Image</div><div class="line">im = Image.open(&apos;7039.jpg&apos;)</div></pre></td></tr></table></figure>
<h5 id="1-2、把彩色图像转化为灰度图像。RBG转化到HSI彩色空间，采用I分量："><a href="#1-2、把彩色图像转化为灰度图像。RBG转化到HSI彩色空间，采用I分量：" class="headerlink" title="1.2、把彩色图像转化为灰度图像。RBG转化到HSI彩色空间，采用I分量："></a>1.2、把彩色图像转化为灰度图像。RBG转化到HSI彩色空间，采用I分量：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">imgry = im.convert(&apos;L&apos;) </div><div class="line">imgry.show()</div></pre></td></tr></table></figure>
<p>灰度看起来是这样的：<img src="http://upload-images.jianshu.io/upload_images/2953420-72f468df5dc788f9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Image.jpg"></p>
<h5 id="1-3、二值化处理"><a href="#1-3、二值化处理" class="headerlink" title="1. 3、二值化处理"></a>1. 3、二值化处理</h5><p>二值化是图像分割的一种常用方法。在二值化图象的时候把大于某个临界灰度值的像素灰度设为灰度极大值，把小于这个值的像素灰度设为灰度极小值，从而实现二值化（一般设置为0-1）。根据阈值选取的不同，二值化的算法分为固定阈值和自适应阈值，这里选用比较简单的固定阈值。</p>
<p>把像素点大于阈值的设置,1，小于阈值的设置为0。生成一张查找表，再调用point()进行映射。注意:记住这个阈值threshold是可以根据实际情况调节的,大小自己调节哪种比较合适<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">threshold = 140</div><div class="line">table = []</div><div class="line">for i in range(256):</div><div class="line">   if i &lt; threshold:</div><div class="line">       table.append(0)</div><div class="line">   else:</div><div class="line">       table.append(1)</div><div class="line">out = imgry.point(table, &apos;1&apos;)</div><div class="line">out.show()</div></pre></td></tr></table></figure></p>
<p>处理结果看起来是这样的：<img src="http://upload-images.jianshu.io/upload_images/2953420-664f85d68cdcc166.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>利用OTSU法（大津阈值分割法）来计算这个阈值,这里只介绍单阈值算法<br>代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">import cv2</div><div class="line">import numpy as np</div><div class="line">from matplotlib import pyplot as plt</div><div class="line"></div><div class="line"> </div><div class="line">image = cv2.imread(&quot;a.jpg&quot;)</div><div class="line">gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)</div><div class="line"></div><div class="line">plt.subplot(131), plt.imshow(image, &quot;gray&quot;)</div><div class="line">plt.title(&quot;source image&quot;), plt.xticks([]), plt.yticks([])</div><div class="line">plt.subplot(132), plt.hist(image.ravel(), 256)</div><div class="line">plt.title(&quot;Histogram&quot;), plt.xticks([]), plt.yticks([])</div><div class="line">ret1, th1 = cv2.threshold(gray, 0, 255, cv2.THRESH_OTSU)  # 方法选择为THRESH_OTSU</div><div class="line">plt.subplot(133), plt.imshow(th1, &quot;gray&quot;)</div><div class="line">plt.title(&quot;OTSU,threshold is &quot; + str(ret1)), plt.xticks([]), plt.yticks([])</div><div class="line">plt.show()</div><div class="line">print(str(ret1))</div></pre></td></tr></table></figure></p>
<p><strong>这里还有其他算法得到阈值,大家可以搜索图像二值化即可</strong></p>
<h4 id="2-图片切割"><a href="#2-图片切割" class="headerlink" title="2.图片切割"></a><strong>2.图片切割</strong></h4><p>识别验证码的重点和难点就在于能否成功分割字符，对于颜色相同又完全粘连的字符，比如google的验证码，目前是没法做到5%以上的识别率的。<br>不过google的验证码基本上人类也只有30%的识别率。本文使用的验证码例子比较容易识别。可以不用切割，有关图片切割的方法参见这篇博客：<a href="http://www.cnblogs.com/apexchu/p/4231041.html" target="_blank" rel="external">http://www.cnblogs.com/apexchu/p/4231041.html</a></p>
<h4 id="3-利用pytesser模块实现识别"><a href="#3-利用pytesser模块实现识别" class="headerlink" title="3.利用pytesser模块实现识别"></a><strong>3.利用pytesser模块实现识别</strong></h4><p>pytesser是谷歌OCR开源项目的一个模块，在python中导入这个模块即可将图片中的文字转换成文本。<br>链接：<a href="https://code.google.com/p/pytesser/" target="_blank" rel="external">https://code.google.com/p/pytesser/</a> </p>
<p>pytesser 调用了 tesseract。在python中调用pytesser模块，pytesser又用tesseract识别图片中的文字。<br>可以参考这个github项目   <a href="https://github.com/madmaze/pytesseract" target="_blank" rel="external">https://github.com/madmaze/pytesseract</a></p>
<p>示例代码代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line">import pytesseract</div><div class="line">import requests</div><div class="line">#from PIL import ImageEnhance</div><div class="line"></div><div class="line">from PIL import Image</div><div class="line"></div><div class="line"># 由于都是数字</div><div class="line"># 对于识别成字母的 采用该表进行修正</div><div class="line">rep = &#123;&apos;O&apos;: &apos;0&apos;,</div><div class="line">       &apos;I&apos;: &apos;1&apos;, &apos;L&apos;: &apos;1&apos;,</div><div class="line">       &apos;Z&apos;: &apos;2&apos;,</div><div class="line">       &apos;S&apos;: &apos;8&apos;</div><div class="line">       &#125;</div><div class="line"># 二值化处理,threshold为阈值(自己调试哪种出色)</div><div class="line">def initTable(threshold=120):</div><div class="line">    table = []</div><div class="line">    for i in range(256):</div><div class="line">        if i &lt; threshold:</div><div class="line">            table.append(0)</div><div class="line">        else:</div><div class="line">            table.append(1)</div><div class="line"></div><div class="line">    return table</div><div class="line"></div><div class="line">def reconize():</div><div class="line">    # 根据url获取验证码</div><div class="line">    captcha_url=&quot;http://captcha.qq.com/getimage?aid=755049101&amp;rd=0.29258651419368853&quot;</div><div class="line">    r = requests.get(captcha_url)</div><div class="line">    with open(&apos;a.jpg&apos;, &apos;wb&apos;) as f:</div><div class="line">        f.write(r.content)</div><div class="line">        f.close()</div><div class="line">    image = Image.open(&apos;a.jpg&apos;)</div><div class="line">    # 去除黑色边框：不然无法识别(如果有黑色边框的话)</div><div class="line">    img = image.convert(&apos;RGBA&apos;)  # 转换为RGBA</div><div class="line">    pix = img.load()  # 转换为像素</div><div class="line">    for x in range(img.size[0]):  # 处理上下黑边框，size[0]即图片长度</div><div class="line">        pix[x, 0] = pix[x, img.size[1] - 1] = (255, 255, 255, 255)</div><div class="line">    for y in range(img.size[1]):  # 处理左右黑边框，size[1]即图片高度</div><div class="line">        pix[0, y] = pix[img.size[0] - 1, y] = (255, 255, 255, 255)</div><div class="line"></div><div class="line">    # # 灰度</div><div class="line">    image2 = img.convert(&apos;L&apos;)</div><div class="line">    # image2.show()</div><div class="line">    # 降噪</div><div class="line">    binaryImage = image2.point(initTable(), &apos;1&apos;)</div><div class="line">    binaryImage.show()</div><div class="line">    # 黑白</div><div class="line">    # enhancer = ImageEnhance.Contrast(image2)</div><div class="line">    # binaryImage2 = enhancer.enhance(4)</div><div class="line">    # binaryImage2.show()</div><div class="line"></div><div class="line">    # tessdata_dir_config 这里就是你的Tesseract-OCR安装路径,如果没有可能会报错</div><div class="line">    tessdata_dir_config = &apos;--tessdata-dir &quot;C:/Program Files (x86)/Tesseract-OCR/tessdata&quot;&apos;</div><div class="line">    vcode = pytesseract.image_to_string(binaryImage, lang=&apos;eng&apos;, config=tessdata_dir_config)</div><div class="line"></div><div class="line">    # 中文 lang=&apos;chi_sim&apos;,英文lang=&apos;eng&apos; 可以不设置这个</div><div class="line">    # vcode = pytesseract.image_to_string(binaryImage2, lang=&apos;chi_sim&apos;, config=tessdata_dir_config)</div><div class="line">    #这里可以做些最后的文本修复,提高下识别率</div><div class="line">    # text = vcode.strip()</div><div class="line">    # text = text.upper()</div><div class="line">    # for r in rep:</div><div class="line">    #     text = text.replace(r, rep[r])</div><div class="line">    print(vcode)</div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    reconize()</div></pre></td></tr></table></figure></p>
<p>最后如果发现识别率还是不高,可以通过jtessboxeditor 样本训练来提高识别率</p>
<p>参考链接:<a href="http://www.cnblogs.com/zhongtang/p/5555950.html" target="_blank" rel="external">http://www.cnblogs.com/zhongtang/p/5555950.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、探讨&quot;&gt;&lt;a href=&quot;#一、探讨&quot; class=&quot;headerlink&quot; title=&quot;一、探讨&quot;&gt;&lt;/a&gt;一、探讨&lt;/h3&gt;&lt;p&gt;识别图形验证码可以说是做爬虫的必修课，涉及到计算机图形学，机器学习，机器视觉，人工智能等等高深领域……&lt;br&gt;简单地说，计算
    
    </summary>
    
    
      <category term="python" scheme="http://zonectmac.com/tags/python/"/>
    
      <category term="Tesseract-OCR" scheme="http://zonectmac.com/tags/Tesseract-OCR/"/>
    
      <category term="OpenCV" scheme="http://zonectmac.com/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>利用pyinstaller 打包Python程序</title>
    <link href="http://zonectmac.com/2017/06/08/pyinstaller-toexe/"/>
    <id>http://zonectmac.com/2017/06/08/pyinstaller-toexe/</id>
    <published>2017-06-08T15:02:28.000Z</published>
    <updated>2018-01-25T15:56:08.899Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、首先就是安装pyinstaller了-这里只说pip安装-因为方便"><a href="#一、首先就是安装pyinstaller了-这里只说pip安装-因为方便" class="headerlink" title="一、首先就是安装pyinstaller了,这里只说pip安装(因为方便)"></a>一、首先就是安装pyinstaller了,这里只说pip安装(因为方便)</h3><p>cmd命令行进入你安装的Python路径(比如我的是E:\python),最后进入到Scripts这个文件夹<br>　　<br><img src="http://upload-images.jianshu.io/upload_images/2953420-82a2c6e8d7d7a645.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>最后输入</p>
<pre><code>&gt; pip install pyinstaller
</code></pre><p>会提示安装成功</p>
<h3 id="二、进pyinstaller官网查看"><a href="#二、进pyinstaller官网查看" class="headerlink" title="二、进pyinstaller官网查看"></a>二、进pyinstaller官网查看</h3><p>发现目前支持Python2.7和Python3.3-Python3.5版本的Python程序,这里是官网访问<a href="http://www.pyinstaller.org/" target="_blank">Pyinstaller</a></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2953420-826fda2aadeb8f09.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<h3 id="三-pyinstaller命令的使用"><a href="#三-pyinstaller命令的使用" class="headerlink" title="三.pyinstaller命令的使用"></a>三.pyinstaller命令的使用</h3><table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>-F</td>
<td style="text-align:center">指定打包后只生成一个exe格式的文件</td>
</tr>
<tr>
<td>-D</td>
<td style="text-align:center">–onedir 创建一个目录，包含exe文件，但会依赖很多文件（默认选项）</td>
</tr>
<tr>
<td>-c</td>
<td style="text-align:center">–console, –nowindowed 使用控制台，无界面(默认)</td>
</tr>
<tr>
<td>-w</td>
<td style="text-align:center">–windowed, –noconsole 使用窗口，无控制台</td>
</tr>
<tr>
<td>-p</td>
<td style="text-align:center">添加搜索路径，让其找到对应的库。</td>
</tr>
<tr>
<td>-i</td>
<td style="text-align:center">改变生成程序的icon图标</td>
</tr>
</tbody>
</table>
<p>例如:</p>
<pre><code>&gt; pyinstaller -c -F -p E:\python_workpace\PABank\lib E:\python_workpace\PABank\pabank.py

  pabank.py为main函数 的文件
</code></pre><p>运行成功后,在命令行可以看到生成的exe程序所在的目录,,例如E:\python\Scripts\dist</p>
<h3 id="四、注意事项"><a href="#四、注意事项" class="headerlink" title="四、注意事项"></a>四、注意事项</h3><p>1.如果在执行命令是失败了,一般是缺少什么库文件,pip安装就行了<br>2.在GUI编程的时候(PYQT5)一定要加这句,<span style="color: LightSeaGreen !important;"><strong>-p E:\Python\Lib\site-packages\PyQt5\Qt\bin   </strong></span> 这句<br>3.在运行exe文件时,如果提示加载动态库失败,安装下<span style="color: LightSeaGreen !important;"><strong>vc_redist.x64.exe</strong></span>这个vc++2015,可以去微软官网下载</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、首先就是安装pyinstaller了-这里只说pip安装-因为方便&quot;&gt;&lt;a href=&quot;#一、首先就是安装pyinstaller了-这里只说pip安装-因为方便&quot; class=&quot;headerlink&quot; title=&quot;一、首先就是安装pyinstaller了,这
    
    </summary>
    
    
      <category term="pyinstaller" scheme="http://zonectmac.com/tags/pyinstaller/"/>
    
      <category term="python" scheme="http://zonectmac.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>实现发送邮箱的几种方法</title>
    <link href="http://zonectmac.com/2017/04/22/send-email/"/>
    <id>http://zonectmac.com/2017/04/22/send-email/</id>
    <published>2017-04-21T16:18:11.000Z</published>
    <updated>2018-01-25T15:56:08.949Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>以下为众多方法中的几种，后面继续补充。。。。。</p>
</blockquote>
<h3 id="一、telnet-windows下使用cmd（命令行）发送邮件"><a href="#一、telnet-windows下使用cmd（命令行）发送邮件" class="headerlink" title="一、telnet windows下使用cmd（命令行）发送邮件"></a>一、telnet windows下使用cmd（命令行）发送邮件</h3><h4 id="1、windows开启telnet服务"><a href="#1、windows开启telnet服务" class="headerlink" title="　　1、windows开启telnet服务"></a>　　<strong>1、windows开启telnet服务</strong></h4><p>　　 打开控制面板，找到“打开或关闭windows功能”（在“程序”里面），选中对话框中的Telnet客户端、Telnet服务器（可能不需要，没测试），然后确定，等待  完成。这时就开启了telnet功能。</p>
<h4 id="2、开始发送邮件"><a href="#2、开始发送邮件" class="headerlink" title="　　2、开始发送邮件"></a>　　<strong>2、开始发送邮件</strong></h4><blockquote>
<p>（发送邮件过程中不要长时间不操作命令行窗口，超过一定时间不操作的话服务器主机会主动断开连接，命令行窗口提示“遗失对主机的连接”）</p>
</blockquote>
<h5 id="1）打开命令行窗口，连接邮件服务器"><a href="#1）打开命令行窗口，连接邮件服务器" class="headerlink" title="　　1）打开命令行窗口，连接邮件服务器"></a>　　<strong>1）打开命令行窗口，连接邮件服务器</strong></h5><p>　　在命令刚窗口输入 telnet smtp.qq.com 25(这里以qq为例，若是163，则是smtp.163.com,25是端口　号，一般情况下不会变)<br>　　如果连接成功，服务器会返回一串字符：220 smtp.qq.com Esmtp QQ Mail Server</p>
<h5 id="2）向服务器表明身份"><a href="#2）向服务器表明身份" class="headerlink" title="　　2）向服务器表明身份"></a>　　<strong>2）向服务器表明身份</strong></h5><p>　　在命令行输入 helo qq.com如果成功，服务器返回 250 smtp.qq.com<br>(qq.com可以用任何合法字符代替，本人用的名字拼音也通过了)</p>
<h5 id="3）登录认证"><a href="#3）登录认证" class="headerlink" title="　　3）登录认证"></a>　　<strong>3）登录认证</strong></h5><p>　　 在命令行窗口输入 auth login如果成功，服务器会返回一串字符，类似于：334 VXNlcm5hbWU6，<br>　　（334 是不变的，后面的字母可能会变）<br> 　　接着输入你的邮箱（xxxxx@qq.com）的base64编码之后的字符串然后回车<br>　　如果成功，服务器返回一串字符，类似于：334 UGFzc3dvcmQ6<br>　　（334 是不变的，后面的字母可能会变）<br>　　接着输入你的独立密码（注意是独立密码）的base64编码之后的字符串然后回车，<br>　　如果登录成功，服务器返回一串字符：235 Authentication successful，<br>表示登录成功，如果不能成功登录，请检查账号密码是否正确。</p>
<h5 id="4）编写邮件"><a href="#4）编写邮件" class="headerlink" title="　　4）编写邮件"></a>　　<strong>4）编写邮件</strong></h5><p>　　输入 mail from:＜<a href="&#109;&#x61;&#105;&#x6c;&#x74;&#111;&#58;&#x4f60;&#x81ea;&#x5df1;&#30340;&#x90ae;&#x7bb1;&#65292;&#x5c31;&#26159;&#x4e0a;&#x4e00;&#x6b65;&#30340;&#30331;&#x5f55;&#x90ae;&#31665;&#x78;&#120;&#120;&#x40;&#x71;&#x71;&#46;&#99;&#x6f;&#x6d;">&#x4f60;&#x81ea;&#x5df1;&#30340;&#x90ae;&#x7bb1;&#65292;&#x5c31;&#26159;&#x4e0a;&#x4e00;&#x6b65;&#30340;&#30331;&#x5f55;&#x90ae;&#31665;&#x78;&#120;&#120;&#x40;&#x71;&#x71;&#46;&#99;&#x6f;&#x6d;</a>＞ 回车<br>  　　（冒号和尖括号均为因为半角标点符号）<br>　　若格式不正确，服务器返回501 错误；若格式正确，服务器返回250 Ok。<br>　　输入 rcpt to:＜<a href="&#109;&#x61;&#105;&#108;&#x74;&#x6f;&#58;&#x6536;&#20214;&#x4eba;&#37038;&#31665;&#65292;&#x78;&#120;&#120;&#x40;&#x78;&#x78;&#120;&#x2e;&#x78;&#120;&#120;">&#x6536;&#20214;&#x4eba;&#37038;&#31665;&#65292;&#x78;&#120;&#120;&#x40;&#x78;&#x78;&#120;&#x2e;&#x78;&#120;&#120;</a> ＞回车<br>　　若格式不正确，服务器返回501错误；若格式正确，服务器返回250 Ok。<br>　　输入data 回车<br>　　 服务器返回 354 End data with <cr><lf>.<cr><lf><br>　　输入from:名字 回车，<br>　　显示在收件人收邮件时的 发件人 位置<br>　　输入 to:名字 回车，<br>　　显示收件人收邮件时的 收件人 位置<br>　　输入 subject:主题 回车，<br>　　邮件主题<br>　　空一行写邮件内容，写完之后换行，输入英文半角状态下的句号 . 表示邮件内容写完了（不要问我正文中如果包含英文半角状态下的句号怎么办）<br>　　服务器返回 250 Ok: queues as<br>　　表示邮件已经发送<br>如 图：<br>　　<br><img src="http://upload-images.jianshu.io/upload_images/2953420-ddb49e1951cee355.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></lf></cr></lf></cr></p>
<h3 id="二、vbScript-发送邮件"><a href="#二、vbScript-发送邮件" class="headerlink" title="二、vbScript 发送邮件"></a>二、vbScript 发送邮件</h3><blockquote>
<p>vbScript 是个比较老的语言，这里只是玩下，建议还是用JS啦。。。。</p>
</blockquote>
<ul>
<li><p><strong>不用多说，创建一个.vbs文件，输入以下代码：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">NameSpace = &quot;http://schemas.microsoft.com/cdo/configuration/&quot;</div><div class="line">Set objEmail = CreateObject(&quot;CDO.Message&quot;)</div><div class="line">Call SendMail()</div><div class="line">Sub SendMail</div><div class="line">objEmail.BodyPart.Charset = &quot;gb2312&quot;</div><div class="line">objEmail.From = &quot;xxx@xxx.com&quot;</div><div class="line">objEmail.To = &quot;xxx@163.com&quot;</div><div class="line">objectEmail Cc=&quot;xxx@163.com&quot;//抄送</div><div class="line">objectEmail Bcc=&quot;xxx@163.com&quot;//密送</div><div class="line">objEmail.Subject = &quot;subject&quot;</div><div class="line">objEmail.Textbody = &quot;电子邮件内容&quot;</div><div class="line">objEmail.AddAttachment &quot;D:\NewTest\test.rar&quot;//附件</div><div class="line">objEmail.Configuration.Fields.Item (&quot;http://schemas.microsoft.com/cdo/configuration/sendusing&quot;) = 2</div><div class="line">objEmail.Configuration.Fields.Item (&quot;http://schemas.microsoft.com/cdo/configuration/smtpserver&quot;) = &quot;smtp.exmail.qq.com&quot;</div><div class="line">objEmail.Configuration.Fields.Item (&quot;http://schemas.microsoft.com/cdo/configuration/sendusername&quot;) = &quot;你的用户名&quot;</div><div class="line">objEmail.Configuration.Fields.Item (&quot;http://schemas.microsoft.com/cdo/configuration/sendpassword&quot;) = &quot;密码&quot;</div><div class="line">objEmail.Configuration.Fields.Item (&quot;http://schemas.microsoft.com/cdo/configuration/smtpauthenticate&quot;) = 1</div><div class="line">objEmail.Configuration.Fields.Item (&quot;http://schemas.microsoft.com/cdo/configuration/smtpserverport&quot;) = 25</div><div class="line">objEmail.Configuration.Fields.Update</div><div class="line">objEmail.Send</div><div class="line">End Sub</div></pre></td></tr></table></figure>
</li>
<li><p><strong>或者创建一个.bat文件，输入以下代码：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">echo set sh=WScript.CreateObject(&quot;WScript.Shell&quot;) &gt;telnet_tmp.vbs</div><div class="line">echo WScript.Sleep 300 &gt;&gt;telnet_tmp.vbs</div><div class="line">echo sh.SendKeys &quot;open smtp.exmail.qq.com 25&#123;ENTER&#125;&quot; &gt;&gt;telnet_tmp.vbs</div><div class="line">echo WScript.Sleep 100 &gt;&gt;telnet_tmp.vbs</div><div class="line">echo sh.SendKeys &quot;helo abc&#123;ENTER&#125;&quot; &gt;&gt;telnet_tmp.vbs</div><div class="line">echo WScript.Sleep 100 &gt;&gt;telnet_tmp.vbs</div><div class="line">echo sh.SendKeys &quot;auth login&#123;ENTER&#125;&quot; &gt;&gt;telnet_tmp.vbs</div><div class="line">echo WScript.Sleep 100 &gt;&gt;telnet_tmp.vbs</div><div class="line">echo sh.SendKeys &quot;Y3pob3VAc2Zjc2VydmljZS5jb20=&#123;ENTER&#125;&quot; &gt;&gt;telnet_tmp.vbs</div><div class="line">echo WScript.Sleep 100 &gt;&gt;telnet_tmp.vbs</div><div class="line">echo sh.SendKeys &quot;U2ZjMTIz&#123;ENTER&#125;&quot; &gt;&gt;telnet_tmp.vbs</div><div class="line">echo WScript.Sleep 100 &gt;&gt;telnet_tmp.vbs</div><div class="line">echo sh.SendKeys &quot;mail from:&lt;xxx@xxx.com&gt;&#123;ENTER&#125;&quot; &gt;&gt;telnet_tmp.vbs</div><div class="line">echo WScript.Sleep 100 &gt;&gt;telnet_tmp.vbs</div><div class="line">echo sh.SendKeys &quot;rcpt to:&lt;xxx@qq.com&gt;&#123;ENTER&#125;&quot; &gt;&gt;telnet_tmp.vbs</div><div class="line">echo WScript.Sleep 100 &gt;&gt;telnet_tmp.vbs</div><div class="line">echo sh.SendKeys &quot;data&#123;ENTER&#125;&quot; &gt;&gt;telnet_tmp.vbs</div><div class="line">echo WScript.Sleep 100 &gt;&gt;telnet_tmp.vbs</div><div class="line">echo sh.SendKeys &quot;邮件主题!!!!&#123;ENTER&#125;&#123;ENTER&#125;&quot; &gt;&gt;telnet_tmp.vbs</div><div class="line">echo sh.SendKeys &quot;邮件内容!!!!&#123;ENTER&#125;&quot; &gt;&gt;telnet_tmp.vbs</div><div class="line">echo sh.SendKeys &quot;.&#123;ENTER&#125;&quot; &gt;&gt;telnet_tmp.vbs</div><div class="line">start telnet</div><div class="line">cscript //nologo telnet_tmp.vbs</div><div class="line">del telnet_tmp.vbs</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>注意：以上登录telnet账号为<span style="color: LightSeaGreen !important;"><strong>base64</strong></span>转过后的（如：U2ZjMTIz）</p>
</blockquote>
<h3 id="三、Java发送邮件"><a href="#三、Java发送邮件" class="headerlink" title="三、Java发送邮件"></a>三、Java发送邮件</h3><h4 id="1）用spring"><a href="#1）用spring" class="headerlink" title="1）用spring"></a>1）用spring</h4><p>　　上代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">package sendemail;</div><div class="line"></div><div class="line">import java.util.Date;</div><div class="line">import java.util.Properties;</div><div class="line"></div><div class="line">import javax.mail.MessagingException;</div><div class="line"></div><div class="line">import org.springframework.mail.SimpleMailMessage;</div><div class="line">import org.springframework.mail.javamail.JavaMailSenderImpl;</div><div class="line"></div><div class="line">public class SendEmail &#123;</div><div class="line"></div><div class="line">public static void main(String args[]) throws MessagingException &#123;</div><div class="line">// SendEmail a = new SendEmail();</div><div class="line">// a.sendMail();</div><div class="line">sendMail();</div><div class="line">&#125;</div><div class="line"></div><div class="line">private static void sendMail() throws MessagingException &#123;</div><div class="line"></div><div class="line">JavaMailSenderImpl senderImpl = new JavaMailSenderImpl();</div><div class="line">// 设定mail server</div><div class="line">senderImpl.setHost(&quot;smtp.163.com&quot;);</div><div class="line">// 建立邮件消息</div><div class="line">SimpleMailMessage mailMessage = new SimpleMailMessage();</div><div class="line">// 设置收件人，寄件人 用数组发送多个邮件</div><div class="line">// String[] array = new String[] &#123;&quot;sun111@163.com&quot;,&quot;sun222@sohu.com&quot;&#125;;</div><div class="line">// mailMessage.setTo(array);</div><div class="line">mailMessage.setTo(&quot;xxx@qq.com&quot;);</div><div class="line">mailMessage.setFrom(&quot;xxx@163.com&quot;);</div><div class="line">mailMessage.setSubject(&quot; 测试简单文本邮件发送！ &quot;);</div><div class="line">mailMessage.setText(&quot; 测试我的简单邮件发送机制！！2222这是测试环境的代码 &quot; + new Date());</div><div class="line">mailMessage.setSentDate(new Date());</div><div class="line">senderImpl.setPort(25);</div><div class="line">senderImpl.setUsername(&quot;wuxin130&quot;); // 根据自己的情况,设置username</div><div class="line">senderImpl.setPassword(&quot;sss&quot;); // 根据自己的情况, 设置password</div><div class="line">senderImpl.setDefaultEncoding(&quot;UTF-8&quot;);</div><div class="line">Properties prop = new Properties();</div><div class="line">// prop.put(&quot;mail.smtp.auth&quot;, &quot;true&quot;); //</div><div class="line">// 将这个参数设为true，让服务器进行认证,认证用户名和密码是否正确</div><div class="line">prop.put(&quot;mail.smtp.timeout&quot;, &quot;25000&quot;);</div><div class="line">prop.put(&quot;mail.debug&quot;, &quot;true&quot;);// 便于调试</div><div class="line">prop.put(&quot;mail.transport.protocol&quot;, &quot;smtp&quot;);</div><div class="line">/**</div><div class="line">* 关键代码， 出现554 DT:SPM 163 smtp5,D9GowACHO7RNWNdXmXs1Bw--.9035S2</div><div class="line">* 1473730639, please see</div><div class="line">* http://mail.163.com/help/help_spam_16.htm?ip=124.251.36.10</div><div class="line">* &amp;hostid=smtp5&amp;time=1473730639 原因是：ip与域名不匹配。</div><div class="line">*/</div><div class="line">prop.put(&quot;mail.smtp.localhost&quot;, &quot;mail.digu.com&quot;);</div><div class="line">prop.put(&quot;mail.smtp.auth&quot;, &quot;false&quot;);</div><div class="line">prop.put(&quot;mail.smtp.port&quot;, &quot;25&quot;);</div><div class="line">senderImpl.setJavaMailProperties(prop);</div><div class="line">// 发送邮件</div><div class="line"></div><div class="line">senderImpl.send(mailMessage);</div><div class="line"></div><div class="line">System.out.println(&quot; 邮件发送成功.. &quot;);</div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意: 一定要导入<br><span style="color: LightSeaGreen !important;">org.springframework.beans-3.0.5.RELEASE.jar<br>org.springframework.core-3.0.5.RELEASE.jar<br> mail.jar<br>spring-context-support-4.3.4.RELEASE.jar</span><br>四个jar包</p>
</blockquote>
<h4 id="2）基于JavaMail的Java邮件发送：复杂邮件发送"><a href="#2）基于JavaMail的Java邮件发送：复杂邮件发送" class="headerlink" title="2）基于JavaMail的Java邮件发送：复杂邮件发送"></a>2）<a href="http://blog.csdn.net/xietansheng/article/details/51722660" target="_blank" rel="external">基于JavaMail的Java邮件发送：复杂邮件发送</a></h4><blockquote>
<p>一封复杂的邮件内容可以看做是由很多节点（或者可以说是“片段”/“部分”/“零件”）组成，文本、图片、附件等都可以看成是邮件内容中的一个节点。这些节点之间又可以相互关联组合成一个节点。最终组合成一个大节点就是邮件的正文内容。<br>需要两个jar包：<br><span style="color: LightSeaGreen !important;"><strong>activation.jar<br>mail.jar   </strong></span><br>这个jar包一定用最新的，我用的1.4.7 成功了</p>
</blockquote>
<p>完整代码演示:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div></pre></td><td class="code"><pre><div class="line">package com.xiets.javamaildemo;</div><div class="line"></div><div class="line">import java.io.FileOutputStream;</div><div class="line">import java.util.Date;</div><div class="line">import java.util.Properties;</div><div class="line"></div><div class="line">import javax.activation.DataHandler;</div><div class="line">import javax.activation.FileDataSource;</div><div class="line">import javax.mail.Message.RecipientType;</div><div class="line">import javax.mail.Session;</div><div class="line">import javax.mail.Transport;</div><div class="line">import javax.mail.internet.InternetAddress;</div><div class="line">import javax.mail.internet.MimeBodyPart;</div><div class="line">import javax.mail.internet.MimeMessage;</div><div class="line">import javax.mail.internet.MimeMultipart;</div><div class="line">import javax.mail.internet.MimeUtility;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 创建并发送一封包含文本、图片、附件的复杂邮件</div><div class="line"> *</div><div class="line"> * @author xietansheng</div><div class="line"> */public class Main &#123;</div><div class="line"></div><div class="line">    // 发件人的 邮箱 和 密码（替换为自己的邮箱和密码）</div><div class="line">    public static String myEmailAccount = &quot;xxxxxxxx@163.com&quot;;</div><div class="line">    public static String myEmailPassword = &quot;xxxxxxxx&quot;;</div><div class="line"></div><div class="line">    // 发件人邮箱的 SMTP 服务器地址, 必须准确, 不同邮件服务器地址不同, 一般格式为: smtp.xxx.com</div><div class="line">    // 网易163邮箱的 SMTP 服务器地址为: smtp.163.com</div><div class="line">    public static String myEmailSMTPHost = &quot;smtp.163.com&quot;;</div><div class="line"></div><div class="line">    // 收件人邮箱（替换为自己知道的有效邮箱）</div><div class="line">    public static String receiveMailAccount = &quot;xiejava@qq.com&quot;;</div><div class="line"></div><div class="line">    public static void main(String[] args) throws Exception &#123;</div><div class="line">        // 1. 创建参数配置, 用于连接邮件服务器的参数配置</div><div class="line">        Properties props = new Properties();                    // 参数配置</div><div class="line">        props.setProperty(&quot;mail.transport.protocol&quot;, &quot;smtp&quot;);   // 使用的协议（JavaMail规范要求）</div><div class="line">        props.setProperty(&quot;mail.smtp.host&quot;, myEmailSMTPHost);   // 发件人的邮箱的 SMTP 服务器地址</div><div class="line">        props.setProperty(&quot;mail.smtp.auth&quot;, &quot;true&quot;);            // 需要请求认证</div><div class="line"></div><div class="line">        // 开启 SSL 连接, 以及更详细的发送步骤请看上一篇: 基于 JavaMail 的 Java 邮件发送：简单邮件发送</div><div class="line"></div><div class="line">        // 2. 根据配置创建会话对象, 用于和邮件服务器交互</div><div class="line">        Session session = Session.getDefaultInstance(props);</div><div class="line">        session.setDebug(true);                                 // 设置为debug模式, 可以查看详细的发送 log</div><div class="line"></div><div class="line">        // 3. 创建一封邮件</div><div class="line">        MimeMessage message = createMimeMessage(session, myEmailAccount, receiveMailAccount);</div><div class="line"></div><div class="line">        // 也可以保持到本地查看</div><div class="line">        // message.writeTo(file_out_put_stream);</div><div class="line"></div><div class="line">        // 4. 根据 Session 获取邮件传输对象</div><div class="line">        Transport transport = session.getTransport();</div><div class="line"></div><div class="line">        // 5. 使用 邮箱账号 和 密码 连接邮件服务器</div><div class="line">        //    这里认证的邮箱必须与 message 中的发件人邮箱一致，否则报错</div><div class="line">        transport.connect(myEmailAccount, myEmailPassword);</div><div class="line"></div><div class="line">        // 6. 发送邮件, 发到所有的收件地址, message.getAllRecipients() 获取到的是在创建邮件对象时添加的所有收件人, 抄送人, 密送人</div><div class="line">        transport.sendMessage(message, message.getAllRecipients());</div><div class="line"></div><div class="line">        // 7. 关闭连接</div><div class="line">        transport.close();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 创建一封复杂邮件（文本+图片+附件）</div><div class="line">     */</div><div class="line">    public static MimeMessage createMimeMessage(Session session, String sendMail, String receiveMail) throws Exception &#123;</div><div class="line">        // 1. 创建邮件对象</div><div class="line">        MimeMessage message = new MimeMessage(session);</div><div class="line"></div><div class="line">        // 2. From: 发件人</div><div class="line">        message.setFrom(new InternetAddress(sendMail, &quot;我的测试邮件_发件人昵称&quot;, &quot;UTF-8&quot;));</div><div class="line"></div><div class="line">        // 3. To: 收件人（可以增加多个收件人、抄送、密送）</div><div class="line">        message.addRecipient(RecipientType.TO, new InternetAddress(receiveMail, &quot;我的测试邮件_收件人昵称&quot;, &quot;UTF-8&quot;));</div><div class="line"></div><div class="line">        // 4. Subject: 邮件主题</div><div class="line">        message.setSubject(&quot;TEST邮件主题（文本+图片+附件）&quot;, &quot;UTF-8&quot;);</div><div class="line"></div><div class="line">        /*</div><div class="line">         * 下面是邮件内容的创建:</div><div class="line">         */</div><div class="line"></div><div class="line">        // 5. 创建图片“节点”</div><div class="line">        MimeBodyPart image = new MimeBodyPart();</div><div class="line">        DataHandler dh = new DataHandler(new FileDataSource(&quot;FairyTail.jpg&quot;)); // 读取本地文件</div><div class="line">        image.setDataHandler(dh);                   // 将图片数据添加到“节点”</div><div class="line">        image.setContentID(&quot;image_fairy_tail&quot;);     // 为“节点”设置一个唯一编号（在文本“节点”将引用该ID）</div><div class="line"></div><div class="line">        // 6. 创建文本“节点”</div><div class="line">        MimeBodyPart text = new MimeBodyPart();</div><div class="line">        //    这里添加图片的方式是将整个图片包含到邮件内容中, 实际上也可以以 http 链接的形式添加网络图片</div><div class="line">        text.setContent(&quot;这是一张图片&lt;br/&gt;&lt;img src=&apos;cid:image_fairy_tail&apos;/&gt;&quot;, &quot;text/html;charset=UTF-8&quot;);</div><div class="line"></div><div class="line">        // 7. （文本+图片）设置 文本 和 图片 “节点”的关系（将 文本 和 图片 “节点”合成一个混合“节点”）</div><div class="line">        MimeMultipart mm_text_image = new MimeMultipart();</div><div class="line">        mm_text_image.addBodyPart(text);</div><div class="line">        mm_text_image.addBodyPart(image);</div><div class="line">        mm_text_image.setSubType(&quot;related&quot;);    // 关联关系</div><div class="line"></div><div class="line">        // 8. 将 文本+图片 的混合“节点”封装成一个普通“节点”</div><div class="line">        //    最终添加到邮件的 Content 是由多个 BodyPart 组成的 Multipart, 所以我们需要的是 BodyPart,</div><div class="line">        //    上面的 mm_text_image 并非 BodyPart, 所有要把 mm_text_image 封装成一个 BodyPart</div><div class="line">        MimeBodyPart text_image = new MimeBodyPart();</div><div class="line">        text_image.setContent(mm_text_image);</div><div class="line"></div><div class="line">        // 9. 创建附件“节点”</div><div class="line">        MimeBodyPart attachment = new MimeBodyPart();</div><div class="line">        DataHandler dh2 = new DataHandler(new FileDataSource(&quot;妖精的尾巴目录.doc&quot;));  // 读取本地文件</div><div class="line">        attachment.setDataHandler(dh2);                                             // 将附件数据添加到“节点”</div><div class="line">        attachment.setFileName(MimeUtility.encodeText(dh2.getName()));              // 设置附件的文件名（需要编码）</div><div class="line"></div><div class="line">        // 10. 设置（文本+图片）和 附件 的关系（合成一个大的混合“节点” / Multipart ）</div><div class="line">        MimeMultipart mm = new MimeMultipart();</div><div class="line">        mm.addBodyPart(text_image);</div><div class="line">        mm.addBodyPart(attachment);     // 如果有多个附件，可以创建多个多次添加</div><div class="line">        mm.setSubType(&quot;mixed&quot;);         // 混合关系</div><div class="line"></div><div class="line">        // 11. 设置整个邮件的关系（将最终的混合“节点”作为邮件的内容添加到邮件对象）</div><div class="line">        message.setContent(mm);</div><div class="line"></div><div class="line">        // 12. 设置发件时间</div><div class="line">        message.setSentDate(new Date());</div><div class="line"></div><div class="line">        // 13. 保存上面的所有设置</div><div class="line">        message.saveChanges();</div><div class="line"></div><div class="line">        return message;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>如果只是想发送文本和附件，参考一下代码:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line">package com.sendemail;</div><div class="line">import java.util.Date;</div><div class="line">import java.util.Properties;</div><div class="line">import javax.activation.DataHandler;</div><div class="line">import javax.activation.FileDataSource;</div><div class="line">import javax.mail.Session;</div><div class="line">import javax.mail.Transport;</div><div class="line">import javax.mail.internet.InternetAddress;</div><div class="line">import javax.mail.internet.MimeBodyPart;</div><div class="line">import javax.mail.internet.MimeMessage;</div><div class="line">import javax.mail.internet.MimeMessage.RecipientType;</div><div class="line">import javax.mail.internet.MimeMultipart;</div><div class="line">import javax.mail.internet.MimeUtility;</div><div class="line">public class SendEmail2 &#123;</div><div class="line">     // 发件人的 邮箱 和 密码（替换为自己的邮箱和密码）</div><div class="line">     public static String myEmailAccount = &quot;xxx@xxx.com&quot;;</div><div class="line">     public static String myEmailPassword = &quot;*********&quot;;</div><div class="line">     // 发件人邮箱的 SMTP 服务器地址, 必须准确, 不同邮件服务器地址不同, 一般格式为: smtp.xxx.com</div><div class="line">     // 网易163邮箱的 SMTP 服务器地址为: smtp.163.com</div><div class="line">     public static String myEmailSMTPHost = &quot;smtp.exmail.qq.com&quot;;</div><div class="line">     // 收件人邮箱（替换为自己知道的有效邮箱）</div><div class="line">     public static String receiveMailAccount = &quot;xxx@qq.com&quot;;</div><div class="line">     // 收件人邮箱（替换为自己知道的有效邮箱）</div><div class="line">     public static String receiveMailCcAccount = &quot;13026162269@163.com&quot;;</div><div class="line">     public static void main(String[] args) throws Exception &#123;</div><div class="line">          // 1. 创建参数配置, 用于连接邮件服务器的参数配置</div><div class="line">          Properties props = new Properties(); // 参数配置</div><div class="line">          props.setProperty(&quot;mail.transport.protocol&quot;, &quot;smtp&quot;); // 使用的协议（JavaMail规范要求）</div><div class="line">          props.setProperty(&quot;mail.smtp.host&quot;, myEmailSMTPHost); // 发件人的邮箱的 SMTP</div><div class="line">                                                                             // 服务器地址</div><div class="line">          props.setProperty(&quot;mail.smtp.auth&quot;, &quot;true&quot;); // 需要请求认证</div><div class="line">          // 开启 SSL 连接, 以及更详细的发送步骤请看上一篇: 基于 JavaMail 的 Java 邮件发送：简单邮件发送</div><div class="line">          // 2. 根据配置创建会话对象, 用于和邮件服务器交互</div><div class="line">          Session session = Session.getDefaultInstance(props);</div><div class="line">          session.setDebug(true); // 设置为debug模式, 可以查看详细的发送 log</div><div class="line">          // 3. 创建一封邮件</div><div class="line">          MimeMessage message = createMimeMessage(session, myEmailAccount,</div><div class="line">                   receiveMailAccount, receiveMailCcAccount);</div><div class="line">          // 也可以保持到本地查看</div><div class="line">          // message.writeTo(file_out_put_stream);</div><div class="line">          // 4. 根据 Session 获取邮件传输对象</div><div class="line">          Transport transport = session.getTransport();</div><div class="line">          // 5. 使用 邮箱账号 和 密码 连接邮件服务器</div><div class="line">          // 这里认证的邮箱必须与 message 中的发件人邮箱一致，否则报错</div><div class="line">          transport.connect(myEmailAccount, myEmailPassword);</div><div class="line">          // 6. 发送邮件, 发到所有的收件地址, message.getAllRecipients() 获取到的是在创建邮件对象时添加的所有收件人,</div><div class="line">          // 抄送人, 密送人</div><div class="line">          transport.sendMessage(message, message.getAllRecipients());</div><div class="line">          // 7. 关闭连接</div><div class="line">          transport.close();</div><div class="line">     &#125;</div><div class="line">     /**</div><div class="line">      * 创建一封复杂邮件（文本+图片+附件）</div><div class="line">      */</div><div class="line">     public static MimeMessage createMimeMessage(Session session,</div><div class="line">              String sendMail, String receiveMail, String receiveMailCc)</div><div class="line">              throws Exception &#123;</div><div class="line">          // 1. 创建邮件对象</div><div class="line">          MimeMessage message = new MimeMessage(session);</div><div class="line">          // 2. From: 发件人</div><div class="line">          message.setFrom(new InternetAddress(sendMail, &quot;t-mac&quot;, &quot;UTF-8&quot;));</div><div class="line">          // 3. To: 收件人（可以增加多个收件人、抄送、密送）</div><div class="line">          message.addRecipient(RecipientType.TO, new InternetAddress(receiveMail,</div><div class="line">                   &quot;yao&quot;, &quot;UTF-8&quot;));</div><div class="line">          message.addRecipient(RecipientType.CC, new InternetAddress(</div><div class="line">                   receiveMailCc, &quot;yaoming&quot;, &quot;UTF-8&quot;));</div><div class="line">          // 4. Subject: 邮件主题</div><div class="line">          message.setSubject(&quot;TEST邮件主题（文本+图片+附件）&quot;, &quot;UTF-8&quot;);</div><div class="line">         // 添加文本</div><div class="line">          MimeBodyPart htmlPart = new MimeBodyPart();</div><div class="line">          htmlPart.setContent( &quot;hahahahh&quot;,&quot;text/html;charset=UTF-8&quot;);</div><div class="line">          /*</div><div class="line">           * 下面是邮件内容的创建:</div><div class="line">           */</div><div class="line">          // 9. 创建附件“节点”</div><div class="line">          MimeBodyPart attachment = new MimeBodyPart();</div><div class="line">          DataHandler dh2 = new DataHandler(new FileDataSource(</div><div class="line">                   &quot;E:\\test\\NewTest\\Download.CSV&quot;)); // 读取本地文件</div><div class="line">          attachment.setDataHandler(dh2); // 将附件数据添加到“节点”</div><div class="line">          attachment.setFileName(MimeUtility.encodeText(dh2.getName())); // 设置附件的文件名（需要编码）</div><div class="line">          // 10. 设置（文本+图片）和 附件 的关系（合成一个大的混合“节点” / Multipart ）</div><div class="line">          MimeMultipart mm = new MimeMultipart();</div><div class="line">           mm.addBodyPart(htmlPart);</div><div class="line">          mm.addBodyPart(attachment); // 如果有多个附件，可以创建多个多次添加</div><div class="line">          mm.setSubType(&quot;mixed&quot;); // 混合关系</div><div class="line">          // 11. 设置整个邮件的关系（将最终的混合“节点”作为邮件的内容添加到邮件对象）</div><div class="line">          message.setContent(mm);</div><div class="line">          // 12. 设置发件时间</div><div class="line">          message.setSentDate(new Date());</div><div class="line">         // message.setText(&quot;保存上面的所有设置&quot;);// 设置文本内容</div><div class="line">          // 13. 保存上面的所有设置</div><div class="line">          message.saveChanges();</div><div class="line">          return message;</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="四、Python发送邮件"><a href="#四、Python发送邮件" class="headerlink" title="四、Python发送邮件"></a>四、Python发送邮件</h3><blockquote>
<p>终于来到了Python，不多说，直接上代码：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div></pre></td><td class="code"><pre><div class="line"># -*- coding: utf-8 -*-</div><div class="line"></div><div class="line">&apos;&apos;&apos;</div><div class="line">发送邮件</div><div class="line">&apos;&apos;&apos;</div><div class="line"></div><div class="line">import smtplib</div><div class="line">from email.mime.base import MIMEBase</div><div class="line">from email.mime.multipart import MIMEMultipart</div><div class="line">from email.mime.text import MIMEText</div><div class="line">import os.path</div><div class="line">import email</div><div class="line">import mimetypes</div><div class="line">import os</div><div class="line">from os.path import join, getsize</div><div class="line">import traceback</div><div class="line"></div><div class="line">class EmailManager:</div><div class="line">    &apos;&apos;&apos;</div><div class="line">    send email to the given email address automatically</div><div class="line">    &apos;&apos;&apos;</div><div class="line"></div><div class="line">    def __init__(self, **kw):</div><div class="line">        &apos; 构造函数 &apos;</div><div class="line">        self.kw = kw</div><div class="line"></div><div class="line">        # self.smtp_server = &quot;smtp.exmail.qq.com&quot;</div><div class="line">        self.MAX_FILE_SIZE = 10 * 1024 * 1024  # 10M</div><div class="line"></div><div class="line">    def run(self):</div><div class="line">        # 总入口</div><div class="line">        try:</div><div class="line">            # 初始化</div><div class="line">            self.__my_init()</div><div class="line">            # 登录SMTP服务器，验证授权</div><div class="line">            server = self.get_login_server()</div><div class="line">            # 生成邮件主体内容</div><div class="line">            main_msg = self.get_main_msg()</div><div class="line">            # 生成邮件附件内容</div><div class="line">            file_msg = self.get_attach_file_msg()</div><div class="line"></div><div class="line">            if file_msg is not None:</div><div class="line">                main_msg.attach(file_msg)</div><div class="line"></div><div class="line">            # 得到格式化后的完整文本</div><div class="line">            fullText = main_msg.as_string()</div><div class="line"></div><div class="line">            # 发送邮件</div><div class="line">            server.sendmail(self.msg_from, self.receiver, fullText)</div><div class="line">        except Exception as e:</div><div class="line">            print(e)</div><div class="line">            exstr = traceback.format_exc()</div><div class="line">            print(exstr)</div><div class="line">            server.quit()</div><div class="line">            exit()</div><div class="line"></div><div class="line">    def get_main_msg(self):</div><div class="line">        &apos; 生成邮件主体内容 &apos;</div><div class="line">        # 构造MIMEMultipart对象做为根容器</div><div class="line">        main_msg = MIMEMultipart()</div><div class="line"></div><div class="line">        # 构造MIMEText对象做为邮件显示内容并附加到根容器</div><div class="line">        text_msg = MIMEText(self.msg_content, _charset=&quot;utf-8&quot;)</div><div class="line">        main_msg.attach(text_msg)</div><div class="line"></div><div class="line">        # 设置根容器属性</div><div class="line">        main_msg[&apos;From&apos;] = self.msg_from</div><div class="line">        main_msg[&apos;To&apos;] = self.msg_to</div><div class="line">        main_msg[&apos;Cc&apos;] = self.msg_cc</div><div class="line">        main_msg[&apos;Subject&apos;] = self.msg_subject</div><div class="line">        main_msg[&apos;Date&apos;] = self.msg_date</div><div class="line"></div><div class="line">        return main_msg</div><div class="line"></div><div class="line">    def get_attach_file_msg(self):</div><div class="line">        &apos; 生成邮件附件内容 &apos;</div><div class="line">        if self.attach_file is not None and self.attach_file != &quot;&quot;:</div><div class="line">            try:</div><div class="line">                self.validate_file_size()</div><div class="line"></div><div class="line">                data = open(self.attach_file, &apos;rb&apos;)</div><div class="line">                ctype, encoding = mimetypes.guess_type(self.attach_file)</div><div class="line">                if ctype is None or encoding is not None:</div><div class="line">                    ctype = &apos;application/octet-stream&apos;</div><div class="line">                maintype, subtype = ctype.split(&apos;/&apos;, 1)</div><div class="line">                file_msg = MIMEBase(maintype, subtype)</div><div class="line">                file_msg.set_payload(data.read())</div><div class="line">                data.close()</div><div class="line"></div><div class="line">                email.encoders.encode_base64(file_msg)  # 把附件编码</div><div class="line"></div><div class="line">                ## 设置附件头</div><div class="line">                basename = os.path.basename(self.attach_file)</div><div class="line">                file_msg.add_header(&apos;Content-Disposition&apos;, &apos;attachment&apos;, filename=basename)  # 修改邮件头</div><div class="line"></div><div class="line">                return file_msg</div><div class="line">            except Exception as e:</div><div class="line">                print(e)</div><div class="line">                return None</div><div class="line"></div><div class="line">        else:</div><div class="line">            return None</div><div class="line"></div><div class="line">    def get_login_server(self):</div><div class="line">        &apos; 登录SMTP服务器，验证授权信息 &apos;</div><div class="line">        server = smtplib.SMTP(self.smtp_server)</div><div class="line">        server.login(self.server_username, self.server_pwd)  # 仅smtp服务器需要验证时</div><div class="line"></div><div class="line">        return server</div><div class="line"></div><div class="line">    def validate_file_size(self):</div><div class="line">        &apos; 验证文件大小是否合法 &apos;</div><div class="line">        if getsize(self.attach_file) &gt; self.MAX_FILE_SIZE:</div><div class="line">            raise Exception(u&apos;附件过大，上传失败&apos;)</div><div class="line"></div><div class="line">    def __my_init(self):</div><div class="line">        &apos; 配置初始化 &apos;</div><div class="line">        # 邮箱登录设置</div><div class="line">        self.smtp_server = self.__get_cfg(&apos;smtp_server&apos;)</div><div class="line">        self.server_username = self.__get_cfg(&apos;server_username&apos;)</div><div class="line">        self.server_pwd = self.__get_cfg(&apos;server_pwd&apos;)</div><div class="line"></div><div class="line">        # 邮件内容设置</div><div class="line">        self.receiver = self.__get_cfg(&apos;msg_to&apos;) + self.__get_cfg(&apos;msg_cc&apos;)</div><div class="line"></div><div class="line">        self.msg_from = self.server_username</div><div class="line">        self.msg_to = &apos;,&apos;.join(self.__get_cfg(&apos;msg_to&apos;))</div><div class="line">        self.msg_cc = &apos;,&apos;.join(self.__get_cfg(&apos;msg_cc&apos;))</div><div class="line">        self.msg_subject = self.__get_cfg(&apos;msg_subject&apos;)</div><div class="line">        self.msg_date = self.__get_cfg(&apos;msg_date&apos;)</div><div class="line">        print(self.msg_date)</div><div class="line">        self.msg_content = self.__get_cfg(&apos;msg_content&apos;)</div><div class="line"></div><div class="line">        # 附件</div><div class="line">        self.attach_file = self.__get_cfg(&apos;attach_file&apos;, throw=False)</div><div class="line"></div><div class="line">    def __get_cfg(self, key, throw=True):</div><div class="line">        &apos; 根据key从**kw中取得相应的配置内容 &apos;</div><div class="line">        cfg = self.kw.get(key)</div><div class="line">        if throw == True and (cfg is None or cfg == &apos;&apos;):</div><div class="line">            raise Exception(&quot;配置不能为空！&quot;.decode(&apos;utf-8&apos;))</div><div class="line"></div><div class="line">        return cfg</div><div class="line">以下为调用代码：</div><div class="line"></div><div class="line">mail_cfg = &#123;</div><div class="line">    # 邮箱登录设置，使用SMTP登录</div><div class="line">    &apos;server_username&apos;: &apos;czhou@sfcservice.com&apos;,</div><div class="line">    &apos;server_pwd&apos;: &apos;密码&apos;,</div><div class="line">    &apos;smtp_server&apos;: &apos;smtp.exmail.qq.com&apos;,</div><div class="line">    # 邮件内容设置</div><div class="line">    &apos;msg_to&apos;: [&apos;czhou@sfcservice.com&apos;],  # 可以在此添加收件人,一定要list类型</div><div class="line">    &apos;msg_cc&apos;: [&apos;zone_c@qq.com&apos;, &apos;13026162269@163.com&apos;],</div><div class="line">    &apos;msg_subject&apos;: u&apos;代码&apos;,</div><div class="line">    &apos;msg_date&apos;: time.strftime(&apos;%Y-%m-%d %X&apos;, time.localtime()),</div><div class="line">    &apos;msg_content&apos;: u&quot;我的备份&quot;,</div><div class="line"></div><div class="line">    # 附件</div><div class="line">    &apos;attach_file&apos;: &apos;E:\\test\\NewTest\\test.txt&apos;</div><div class="line">&#125;</div><div class="line"># print( time.strftime(&apos;%Y-%m-%d %X&apos;, time.localtime()))</div><div class="line">email_manager = EmailManager(**mail_cfg)</div><div class="line"></div><div class="line">email_manager.run()</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;以下为众多方法中的几种，后面继续补充。。。。。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;一、telnet-windows下使用cmd（命令行）发送邮件&quot;&gt;&lt;a href=&quot;#一、telnet-windows下使用cmd（命令行）发送邮件
    
    </summary>
    
    
      <category term="python" scheme="http://zonectmac.com/tags/python/"/>
    
      <category term="sendEmail" scheme="http://zonectmac.com/tags/sendEmail/"/>
    
      <category term="Java" scheme="http://zonectmac.com/tags/Java/"/>
    
      <category term="VBScript" scheme="http://zonectmac.com/tags/VBScript/"/>
    
      <category term="telnet" scheme="http://zonectmac.com/tags/telnet/"/>
    
  </entry>
  
  <entry>
    <title>测试文章</title>
    <link href="http://zonectmac.com/2016/09/03/hexo-test/"/>
    <id>http://zonectmac.com/2016/09/03/hexo-test/</id>
    <published>2016-09-03T13:59:10.000Z</published>
    <updated>2018-01-25T15:56:08.664Z</updated>
    
    <content type="html"><![CDATA[<h1 id="biaoti"><a href="#biaoti" class="headerlink" title="biaoti"></a>biaoti</h1><h3 id="baagaagar"><a href="#baagaagar" class="headerlink" title="baagaagar"></a>baagaagar</h3>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;biaoti&quot;&gt;&lt;a href=&quot;#biaoti&quot; class=&quot;headerlink&quot; title=&quot;biaoti&quot;&gt;&lt;/a&gt;biaoti&lt;/h1&gt;&lt;h3 id=&quot;baagaagar&quot;&gt;&lt;a href=&quot;#baagaagar&quot; class=&quot;headerlink
    
    </summary>
    
      <category term="测试" scheme="http://zonectmac.com/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="test" scheme="http://zonectmac.com/tags/test/"/>
    
      <category term="hexo" scheme="http://zonectmac.com/tags/hexo/"/>
    
      <category term="github" scheme="http://zonectmac.com/tags/github/"/>
    
  </entry>
  
</feed>
